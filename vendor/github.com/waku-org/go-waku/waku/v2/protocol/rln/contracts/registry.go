// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// RLNRegistryMetaData contains all meta data concerning the RLNRegistry contract.
var RLNRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poseidonHasher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncompatibleStorage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleStorageIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStorageContractAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"name\":\"StorageAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"name\":\"NewStorageContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"forceProgress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStorageIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poseidonHasher\",\"outputs\":[{\"internalType\":\"contractIPoseidonHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"storageIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"commitments\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"storageIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"commitments\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"name\":\"registerStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"storages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingStorageIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040526000600260006101000a81548161ffff021916908361ffff1602179055503480156200002f57600080fd5b5060405162002f6838038062002f688339818101604052810190620000559190620001e6565b6200007562000069620000b060201b60201c565b620000b860201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000218565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ae8262000181565b9050919050565b620001c081620001a1565b8114620001cc57600080fd5b50565b600081519050620001e081620001b5565b92915050565b600060208284031215620001ff57620001fe6200017c565b5b60006200020f84828501620001cf565b91505092915050565b608051612d2662000242600039600081816103e2015281816104120152610ad80152612d266000f3fe60806040523480156200001157600080fd5b5060043610620000e25760003560e01c8063ab02492a1162000099578063ef653d5e116200006f578063ef653d5e14620001d1578063f184ef4c14620001f1578063f2fde38b1462000213578063f5542147146200023357620000e2565b8063ab02492a1462000183578063cf61637414620001a3578063d44fda1f14620001c557620000e2565b806326e0fc1f14620000e7578063331b6ab3146200010757806342f542e21462000129578063715018a614620001355780637a34289d14620001415780638da5cb5b1462000161575b600080fd5b620001056004803603810190620000ff919062001045565b62000269565b005b62000111620003e0565b60405162000120919062001117565b60405180910390f35b6200013362000404565b005b6200013f6200048b565b005b6200015f6004803603810190620001599190620011a2565b620004a3565b005b6200016b6200075f565b6040516200017a91906200121c565b60405180910390f35b620001a160048036038101906200019b919062001239565b62000788565b005b620001ad6200088b565b604051620001bc9190620012b4565b60405180910390f35b620001cf6200089f565b005b620001ef6004803603810190620001e9919062001302565b62000a09565b005b620001fb62000c9e565b6040516200020a9190620012b4565b60405180910390f35b6200023160048036038101906200022b919062001302565b62000cb2565b005b6200025160048036038101906200024b919062001334565b62000d3c565b6040516200026091906200121c565b60405180910390f35b600060149054906101000a900461ffff1661ffff168261ffff1610620002bb576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600167ffffffffffffffff811115620002db57620002da62001366565b5b6040519080825280602002602001820160405280156200030a5781602001602082028036833780820191505090505b509050818160008151811062000325576200032462001395565b5b602002602001018181525050600160008461ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a34289d826040518263ffffffff1660e01b8152600401620003a7919062001492565b600060405180830381600087803b158015620003c257600080fd5b505af1158015620003d7573d6000803e3d6000fd5b50505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6200040e62000d6f565b60007f0000000000000000000000000000000000000000000000000000000000000000600060149054906101000a900461ffff16604051620004509062000fb3565b6200045d929190620014b6565b604051809103906000f0801580156200047a573d6000803e3d6000fd5b509050620004888162000df4565b50565b6200049562000d6f565b620004a1600062000ee7565b565b600060149054906101000a900461ffff1661ffff16600260009054906101000a900461ffff1661ffff161062000505576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6001156200075b5760016000600260009054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a34289d83836040518363ffffffff1660e01b8152600401620005969291906200155a565b600060405180830381600087803b158015620005b157600080fd5b505af1925050508015620005c3575060015b6200074f573d8060008114620005f6576040519150601f19603f3d011682016040523d82523d6000602084013e620005fb565b606091505b506040516024016040516020818303038152906040527f57f69531000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050805190602001208180519060200120146200069c57805181602001fd5b600060149054906101000a900461ffff1661ffff166001600260009054906101000a900461ffff16620006d09190620015af565b61ffff16106200070c576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260008282829054906101000a900461ffff166200072e9190620015af565b92506101000a81548161ffff021916908361ffff1602179055505062000755565b6200075b565b62000506565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060149054906101000a900461ffff1661ffff168361ffff1610620007da576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008461ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637a34289d83836040518363ffffffff1660e01b8152600401620008529291906200155a565b600060405180830381600087803b1580156200086d57600080fd5b505af115801562000882573d6000803e3d6000fd5b50505050505050565b600260009054906101000a900461ffff1681565b620008a962000d6f565b600060149054906101000a900461ffff1661ffff16600260009054906101000a900461ffff1661ffff16106200090b576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160006001600260009054906101000a900461ffff16620009469190620015af565b61ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620009cb576040517fd23276a200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260008282829054906101000a900461ffff16620009ed9190620015af565b92506101000a81548161ffff021916908361ffff160217905550565b62000a1362000d6f565b600073ffffffffffffffffffffffffffffffffffffffff16600160008060149054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000ad157806040517f9cfabd1600000000000000000000000000000000000000000000000000000000815260040162000ac891906200121c565b60405180910390fd5b60008190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663331b6ab36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b59573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b7f919062001633565b73ffffffffffffffffffffffffffffffffffffffff161462000bcc576040517eaec95400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060149054906101000a900461ffff1661ffff168173ffffffffffffffffffffffffffffffffffffffff166328b070e06040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c2d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c5391906200167c565b61ffff161462000c8f576040517fb893b72300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62000c9a8262000df4565b5050565b600060149054906101000a900461ffff1681565b62000cbc62000d6f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000d2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000d259062001735565b60405180910390fd5b62000d398162000ee7565b50565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62000d7962000fab565b73ffffffffffffffffffffffffffffffffffffffff1662000d996200075f565b73ffffffffffffffffffffffffffffffffffffffff161462000df2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000de990620017a7565b60405180910390fd5b565b80600160008060149054906101000a900461ffff1661ffff1661ffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf6a3b406170499209d0fcf152a1605c7c5a5c99c855e2bb803433fc960718eb600060149054906101000a900461ffff168260405162000ea0929190620017c9565b60405180910390a16001600060148282829054906101000a900461ffff1662000eca9190620015af565b92506101000a81548161ffff021916908361ffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6114fa80620017f783390190565b600080fd5b600080fd5b600061ffff82169050919050565b62000fe48162000fcb565b811462000ff057600080fd5b50565b600081359050620010048162000fd9565b92915050565b6000819050919050565b6200101f816200100a565b81146200102b57600080fd5b50565b6000813590506200103f8162001014565b92915050565b600080604083850312156200105f576200105e62000fc1565b5b60006200106f8582860162000ff3565b925050602062001082858286016200102e565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620010d7620010d1620010cb846200108c565b620010ac565b6200108c565b9050919050565b6000620010eb82620010b6565b9050919050565b6000620010ff82620010de565b9050919050565b6200111181620010f2565b82525050565b60006020820190506200112e600083018462001106565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126200115c576200115b62001134565b5b8235905067ffffffffffffffff8111156200117c576200117b62001139565b5b6020830191508360208202830111156200119b576200119a6200113e565b5b9250929050565b60008060208385031215620011bc57620011bb62000fc1565b5b600083013567ffffffffffffffff811115620011dd57620011dc62000fc6565b5b620011eb8582860162001143565b92509250509250929050565b600062001204826200108c565b9050919050565b6200121681620011f7565b82525050565b60006020820190506200123360008301846200120b565b92915050565b60008060006040848603121562001255576200125462000fc1565b5b6000620012658682870162000ff3565b935050602084013567ffffffffffffffff81111562001289576200128862000fc6565b5b620012978682870162001143565b92509250509250925092565b620012ae8162000fcb565b82525050565b6000602082019050620012cb6000830184620012a3565b92915050565b620012dc81620011f7565b8114620012e857600080fd5b50565b600081359050620012fc81620012d1565b92915050565b6000602082840312156200131b576200131a62000fc1565b5b60006200132b84828501620012eb565b91505092915050565b6000602082840312156200134d576200134c62000fc1565b5b60006200135d8482850162000ff3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620013fb816200100a565b82525050565b60006200140f8383620013f0565b60208301905092915050565b6000602082019050919050565b60006200143582620013c4565b620014418185620013cf565b93506200144e83620013e0565b8060005b838110156200148557815162001469888262001401565b975062001476836200141b565b92505060018101905062001452565b5085935050505092915050565b60006020820190508181036000830152620014ae818462001428565b905092915050565b6000604082019050620014cd60008301856200120b565b620014dc6020830184620012a3565b9392505050565b600080fd5b82818337600083830152505050565b6000620015058385620013cf565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156200153b576200153a620014e3565b5b6020830292506200154e838584620014e8565b82840190509392505050565b6000602082019050818103600083015262001577818486620014f7565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620015bc8262000fcb565b9150620015c98362000fcb565b92508261ffff03821115620015e357620015e262001580565b5b828201905092915050565b6000620015fb82620011f7565b9050919050565b6200160d81620015ee565b81146200161957600080fd5b50565b6000815190506200162d8162001602565b92915050565b6000602082840312156200164c576200164b62000fc1565b5b60006200165c848285016200161c565b91505092915050565b600081519050620016768162000fd9565b92915050565b60006020828403121562001695576200169462000fc1565b5b6000620016a58482850162001665565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006200171d602683620016ae565b91506200172a82620016bf565b604082019050919050565b6000602082019050818103600083015262001750816200170e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200178f602083620016ae565b91506200179c8262001757565b602082019050919050565b60006020820190508181036000830152620017c28162001780565b9050919050565b6000604082019050620017e06000830185620012a3565b620017ef60208301846200120b565b939250505056fe61016060405260006001553480156200001757600080fd5b50604051620014fa380380620014fa83398181016040528101906200003d919062000290565b6000601483600062000064620000586200011b60201b60201c565b6200012360201b60201c565b83608081815250508260a08181525050826001901b60c081815250508173ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250504363ffffffff166101208163ffffffff1681525050505050508061ffff166101408161ffff16815250505050620002d7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021982620001ec565b9050919050565b6200022b816200020c565b81146200023757600080fd5b50565b6000815190506200024b8162000220565b92915050565b600061ffff82169050919050565b6200026a8162000251565b81146200027657600080fd5b50565b6000815190506200028a816200025f565b92915050565b60008060408385031215620002aa57620002a9620001e7565b5b6000620002ba858286016200023a565b9250506020620002cd8582860162000279565b9150509250929050565b60805160a05160c05160e0516101005161012051610140516111ba620003406000396000610545015260006105e3015260006105690152600081816104ac015261058d0152600081816107560152610aea015260006106fc015260006107ac01526111ba6000f3fe60806040526004361061011f5760003560e01c80638be9b119116100a0578063c5b208ff11610064578063c5b208ff146103c5578063d0383d6814610402578063f207564e1461042d578063f220b9ec14610449578063f2fde38b146104745761011f565b80638be9b119146102de5780638da5cb5b1461030757806398366e3514610332578063ae74552a1461035d578063bc499128146103885761011f565b80634add651e116100e75780634add651e146101f95780635daf08ca146102245780636bdcc8ab14610261578063715018a61461029e5780637a34289d146102b55761011f565b806322d9730c1461012457806328b070e0146101615780632b7ac3f31461018c578063331b6ab3146101b75780633ccfd60b146101e2575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190610b86565b61049d565b6040516101589190610bce565b60405180910390f35b34801561016d57600080fd5b50610176610543565b6040516101839190610c06565b60405180910390f35b34801561019857600080fd5b506101a1610567565b6040516101ae9190610ca0565b60405180910390f35b3480156101c357600080fd5b506101cc61058b565b6040516101d99190610cdc565b60405180910390f35b3480156101ee57600080fd5b506101f76105af565b005b34801561020557600080fd5b5061020e6105e1565b60405161021b9190610d16565b60405180910390f35b34801561023057600080fd5b5061024b60048036038101906102469190610b86565b610605565b6040516102589190610d40565b60405180910390f35b34801561026d57600080fd5b5061028860048036038101906102839190610b86565b61061d565b6040516102959190610bce565b60405180910390f35b3480156102aa57600080fd5b506102b361063d565b005b3480156102c157600080fd5b506102dc60048036038101906102d79190610dc0565b610651565b005b3480156102ea57600080fd5b5061030560048036038101906103009190610e6d565b61069f565b005b34801561031357600080fd5b5061031c6106d1565b6040516103299190610ee2565b60405180910390f35b34801561033e57600080fd5b506103476106fa565b6040516103549190610d40565b60405180910390f35b34801561036957600080fd5b5061037261071e565b60405161037f9190610d40565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190610b86565b610724565b6040516103bc9190610d40565b60405180910390f35b3480156103d157600080fd5b506103ec60048036038101906103e79190610f29565b61073c565b6040516103f99190610d40565b60405180910390f35b34801561040e57600080fd5b50610417610754565b6040516104249190610d40565b60405180910390f35b61044760048036038101906104429190610b86565b610778565b005b34801561045557600080fd5b5061045e6107aa565b60405161046b9190610d40565b60405180910390f35b34801561048057600080fd5b5061049b60048036038101906104969190610f29565b6107ce565b005b600080821415801561053c57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e493ef8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190610f6b565b82105b9050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b60036020528060005260406000206000915090505481565b60046020528060005260406000206000915054906101000a900460ff1681565b610645610851565b61064f60006108cf565b565b610659610851565b600082829050905060005b818110156106995761068e84848381811061068257610681610f98565b5b90506020020135610993565b806001019050610664565b50505050565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b60026020528060005260406000206000915090505481565b60056020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fd623472500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6107d6610851565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c9061104a565b60405180910390fd5b61084e816108cf565b50565b610859610a39565b73ffffffffffffffffffffffffffffffffffffffff166108776106d1565b73ffffffffffffffffffffffffffffffffffffffff16146108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c4906110b6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61099c81610a41565b600154600360008381526020019081526020016000208190555060016004600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507f5a92c2530f207992057b9c3e544108ffce3beda4a63719f316967c49bf6159d281600154604051610a159291906110d6565b60405180910390a16001806000828254610a2f919061112e565b9250508190555050565b600033905090565b610a4a8161049d565b610a8b57806040517f7f3e75af000000000000000000000000000000000000000000000000000000008152600401610a829190610d40565b60405180910390fd5b600115156004600083815260200190815260200160002060009054906101000a900460ff16151503610ae8576040517e0a60f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060015410610b43576040517f57f6953100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600080fd5b600080fd5b6000819050919050565b610b6381610b50565b8114610b6e57600080fd5b50565b600081359050610b8081610b5a565b92915050565b600060208284031215610b9c57610b9b610b46565b5b6000610baa84828501610b71565b91505092915050565b60008115159050919050565b610bc881610bb3565b82525050565b6000602082019050610be36000830184610bbf565b92915050565b600061ffff82169050919050565b610c0081610be9565b82525050565b6000602082019050610c1b6000830184610bf7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c66610c61610c5c84610c21565b610c41565b610c21565b9050919050565b6000610c7882610c4b565b9050919050565b6000610c8a82610c6d565b9050919050565b610c9a81610c7f565b82525050565b6000602082019050610cb56000830184610c91565b92915050565b6000610cc682610c6d565b9050919050565b610cd681610cbb565b82525050565b6000602082019050610cf16000830184610ccd565b92915050565b600063ffffffff82169050919050565b610d1081610cf7565b82525050565b6000602082019050610d2b6000830184610d07565b92915050565b610d3a81610b50565b82525050565b6000602082019050610d556000830184610d31565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d8057610d7f610d5b565b5b8235905067ffffffffffffffff811115610d9d57610d9c610d60565b5b602083019150836020820283011115610db957610db8610d65565b5b9250929050565b60008060208385031215610dd757610dd6610b46565b5b600083013567ffffffffffffffff811115610df557610df4610b4b565b5b610e0185828601610d6a565b92509250509250929050565b6000610e1882610c21565b9050919050565b610e2881610e0d565b8114610e3357600080fd5b50565b600081359050610e4581610e1f565b92915050565b600081905082602060080282011115610e6757610e66610d65565b5b92915050565b60008060006101408486031215610e8757610e86610b46565b5b6000610e9586828701610b71565b9350506020610ea686828701610e36565b9250506040610eb786828701610e4b565b9150509250925092565b6000610ecc82610c21565b9050919050565b610edc81610ec1565b82525050565b6000602082019050610ef76000830184610ed3565b92915050565b610f0681610ec1565b8114610f1157600080fd5b50565b600081359050610f2381610efd565b92915050565b600060208284031215610f3f57610f3e610b46565b5b6000610f4d84828501610f14565b91505092915050565b600081519050610f6581610b5a565b92915050565b600060208284031215610f8157610f80610b46565b5b6000610f8f84828501610f56565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611034602683610fc7565b915061103f82610fd8565b604082019050919050565b6000602082019050818103600083015261106381611027565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110a0602083610fc7565b91506110ab8261106a565b602082019050919050565b600060208201905081810360008301526110cf81611093565b9050919050565b60006040820190506110eb6000830185610d31565b6110f86020830184610d31565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113982610b50565b915061114483610b50565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611179576111786110ff565b5b82820190509291505056fea26469706673582212205b9493b64379a82ad7d7b62004d979695bc51f0217dab7805001188ca178c99964736f6c634300080f0033a26469706673582212202f8b44307445289ea5b0e4b8da5a4af3afc97cfcc690ad7b6a7e37459114f33864736f6c634300080f0033",
}

// RLNRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use RLNRegistryMetaData.ABI instead.
var RLNRegistryABI = RLNRegistryMetaData.ABI

// RLNRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RLNRegistryMetaData.Bin instead.
var RLNRegistryBin = RLNRegistryMetaData.Bin

// DeployRLNRegistry deploys a new Ethereum contract, binding an instance of RLNRegistry to it.
func DeployRLNRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, _poseidonHasher common.Address) (common.Address, *types.Transaction, *RLNRegistry, error) {
	parsed, err := RLNRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RLNRegistryBin), backend, _poseidonHasher)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RLNRegistry{RLNRegistryCaller: RLNRegistryCaller{contract: contract}, RLNRegistryTransactor: RLNRegistryTransactor{contract: contract}, RLNRegistryFilterer: RLNRegistryFilterer{contract: contract}}, nil
}

// RLNRegistry is an auto generated Go binding around an Ethereum contract.
type RLNRegistry struct {
	RLNRegistryCaller     // Read-only binding to the contract
	RLNRegistryTransactor // Write-only binding to the contract
	RLNRegistryFilterer   // Log filterer for contract events
}

// RLNRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RLNRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RLNRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RLNRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RLNRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RLNRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RLNRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RLNRegistrySession struct {
	Contract     *RLNRegistry      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RLNRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RLNRegistryCallerSession struct {
	Contract *RLNRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// RLNRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RLNRegistryTransactorSession struct {
	Contract     *RLNRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// RLNRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RLNRegistryRaw struct {
	Contract *RLNRegistry // Generic contract binding to access the raw methods on
}

// RLNRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RLNRegistryCallerRaw struct {
	Contract *RLNRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RLNRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RLNRegistryTransactorRaw struct {
	Contract *RLNRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRLNRegistry creates a new instance of RLNRegistry, bound to a specific deployed contract.
func NewRLNRegistry(address common.Address, backend bind.ContractBackend) (*RLNRegistry, error) {
	contract, err := bindRLNRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RLNRegistry{RLNRegistryCaller: RLNRegistryCaller{contract: contract}, RLNRegistryTransactor: RLNRegistryTransactor{contract: contract}, RLNRegistryFilterer: RLNRegistryFilterer{contract: contract}}, nil
}

// NewRLNRegistryCaller creates a new read-only instance of RLNRegistry, bound to a specific deployed contract.
func NewRLNRegistryCaller(address common.Address, caller bind.ContractCaller) (*RLNRegistryCaller, error) {
	contract, err := bindRLNRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RLNRegistryCaller{contract: contract}, nil
}

// NewRLNRegistryTransactor creates a new write-only instance of RLNRegistry, bound to a specific deployed contract.
func NewRLNRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RLNRegistryTransactor, error) {
	contract, err := bindRLNRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RLNRegistryTransactor{contract: contract}, nil
}

// NewRLNRegistryFilterer creates a new log filterer instance of RLNRegistry, bound to a specific deployed contract.
func NewRLNRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RLNRegistryFilterer, error) {
	contract, err := bindRLNRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RLNRegistryFilterer{contract: contract}, nil
}

// bindRLNRegistry binds a generic wrapper to an already deployed contract.
func bindRLNRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RLNRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RLNRegistry *RLNRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RLNRegistry.Contract.RLNRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RLNRegistry *RLNRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RLNRegistry.Contract.RLNRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RLNRegistry *RLNRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RLNRegistry.Contract.RLNRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RLNRegistry *RLNRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RLNRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RLNRegistry *RLNRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RLNRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RLNRegistry *RLNRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RLNRegistry.Contract.contract.Transact(opts, method, params...)
}

// NextStorageIndex is a free data retrieval call binding the contract method 0xf184ef4c.
//
// Solidity: function nextStorageIndex() view returns(uint16)
func (_RLNRegistry *RLNRegistryCaller) NextStorageIndex(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _RLNRegistry.contract.Call(opts, &out, "nextStorageIndex")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// NextStorageIndex is a free data retrieval call binding the contract method 0xf184ef4c.
//
// Solidity: function nextStorageIndex() view returns(uint16)
func (_RLNRegistry *RLNRegistrySession) NextStorageIndex() (uint16, error) {
	return _RLNRegistry.Contract.NextStorageIndex(&_RLNRegistry.CallOpts)
}

// NextStorageIndex is a free data retrieval call binding the contract method 0xf184ef4c.
//
// Solidity: function nextStorageIndex() view returns(uint16)
func (_RLNRegistry *RLNRegistryCallerSession) NextStorageIndex() (uint16, error) {
	return _RLNRegistry.Contract.NextStorageIndex(&_RLNRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RLNRegistry *RLNRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RLNRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RLNRegistry *RLNRegistrySession) Owner() (common.Address, error) {
	return _RLNRegistry.Contract.Owner(&_RLNRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_RLNRegistry *RLNRegistryCallerSession) Owner() (common.Address, error) {
	return _RLNRegistry.Contract.Owner(&_RLNRegistry.CallOpts)
}

// PoseidonHasher is a free data retrieval call binding the contract method 0x331b6ab3.
//
// Solidity: function poseidonHasher() view returns(address)
func (_RLNRegistry *RLNRegistryCaller) PoseidonHasher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RLNRegistry.contract.Call(opts, &out, "poseidonHasher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PoseidonHasher is a free data retrieval call binding the contract method 0x331b6ab3.
//
// Solidity: function poseidonHasher() view returns(address)
func (_RLNRegistry *RLNRegistrySession) PoseidonHasher() (common.Address, error) {
	return _RLNRegistry.Contract.PoseidonHasher(&_RLNRegistry.CallOpts)
}

// PoseidonHasher is a free data retrieval call binding the contract method 0x331b6ab3.
//
// Solidity: function poseidonHasher() view returns(address)
func (_RLNRegistry *RLNRegistryCallerSession) PoseidonHasher() (common.Address, error) {
	return _RLNRegistry.Contract.PoseidonHasher(&_RLNRegistry.CallOpts)
}

// Storages is a free data retrieval call binding the contract method 0xf5542147.
//
// Solidity: function storages(uint16 ) view returns(address)
func (_RLNRegistry *RLNRegistryCaller) Storages(opts *bind.CallOpts, arg0 uint16) (common.Address, error) {
	var out []interface{}
	err := _RLNRegistry.contract.Call(opts, &out, "storages", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Storages is a free data retrieval call binding the contract method 0xf5542147.
//
// Solidity: function storages(uint16 ) view returns(address)
func (_RLNRegistry *RLNRegistrySession) Storages(arg0 uint16) (common.Address, error) {
	return _RLNRegistry.Contract.Storages(&_RLNRegistry.CallOpts, arg0)
}

// Storages is a free data retrieval call binding the contract method 0xf5542147.
//
// Solidity: function storages(uint16 ) view returns(address)
func (_RLNRegistry *RLNRegistryCallerSession) Storages(arg0 uint16) (common.Address, error) {
	return _RLNRegistry.Contract.Storages(&_RLNRegistry.CallOpts, arg0)
}

// UsingStorageIndex is a free data retrieval call binding the contract method 0xcf616374.
//
// Solidity: function usingStorageIndex() view returns(uint16)
func (_RLNRegistry *RLNRegistryCaller) UsingStorageIndex(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _RLNRegistry.contract.Call(opts, &out, "usingStorageIndex")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// UsingStorageIndex is a free data retrieval call binding the contract method 0xcf616374.
//
// Solidity: function usingStorageIndex() view returns(uint16)
func (_RLNRegistry *RLNRegistrySession) UsingStorageIndex() (uint16, error) {
	return _RLNRegistry.Contract.UsingStorageIndex(&_RLNRegistry.CallOpts)
}

// UsingStorageIndex is a free data retrieval call binding the contract method 0xcf616374.
//
// Solidity: function usingStorageIndex() view returns(uint16)
func (_RLNRegistry *RLNRegistryCallerSession) UsingStorageIndex() (uint16, error) {
	return _RLNRegistry.Contract.UsingStorageIndex(&_RLNRegistry.CallOpts)
}

// ForceProgress is a paid mutator transaction binding the contract method 0xd44fda1f.
//
// Solidity: function forceProgress() returns()
func (_RLNRegistry *RLNRegistryTransactor) ForceProgress(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RLNRegistry.contract.Transact(opts, "forceProgress")
}

// ForceProgress is a paid mutator transaction binding the contract method 0xd44fda1f.
//
// Solidity: function forceProgress() returns()
func (_RLNRegistry *RLNRegistrySession) ForceProgress() (*types.Transaction, error) {
	return _RLNRegistry.Contract.ForceProgress(&_RLNRegistry.TransactOpts)
}

// ForceProgress is a paid mutator transaction binding the contract method 0xd44fda1f.
//
// Solidity: function forceProgress() returns()
func (_RLNRegistry *RLNRegistryTransactorSession) ForceProgress() (*types.Transaction, error) {
	return _RLNRegistry.Contract.ForceProgress(&_RLNRegistry.TransactOpts)
}

// NewStorage is a paid mutator transaction binding the contract method 0x42f542e2.
//
// Solidity: function newStorage() returns()
func (_RLNRegistry *RLNRegistryTransactor) NewStorage(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RLNRegistry.contract.Transact(opts, "newStorage")
}

// NewStorage is a paid mutator transaction binding the contract method 0x42f542e2.
//
// Solidity: function newStorage() returns()
func (_RLNRegistry *RLNRegistrySession) NewStorage() (*types.Transaction, error) {
	return _RLNRegistry.Contract.NewStorage(&_RLNRegistry.TransactOpts)
}

// NewStorage is a paid mutator transaction binding the contract method 0x42f542e2.
//
// Solidity: function newStorage() returns()
func (_RLNRegistry *RLNRegistryTransactorSession) NewStorage() (*types.Transaction, error) {
	return _RLNRegistry.Contract.NewStorage(&_RLNRegistry.TransactOpts)
}

// Register is a paid mutator transaction binding the contract method 0x26e0fc1f.
//
// Solidity: function register(uint16 storageIndex, uint256 commitment) returns()
func (_RLNRegistry *RLNRegistryTransactor) Register(opts *bind.TransactOpts, storageIndex uint16, commitment *big.Int) (*types.Transaction, error) {
	return _RLNRegistry.contract.Transact(opts, "register", storageIndex, commitment)
}

// Register is a paid mutator transaction binding the contract method 0x26e0fc1f.
//
// Solidity: function register(uint16 storageIndex, uint256 commitment) returns()
func (_RLNRegistry *RLNRegistrySession) Register(storageIndex uint16, commitment *big.Int) (*types.Transaction, error) {
	return _RLNRegistry.Contract.Register(&_RLNRegistry.TransactOpts, storageIndex, commitment)
}

// Register is a paid mutator transaction binding the contract method 0x26e0fc1f.
//
// Solidity: function register(uint16 storageIndex, uint256 commitment) returns()
func (_RLNRegistry *RLNRegistryTransactorSession) Register(storageIndex uint16, commitment *big.Int) (*types.Transaction, error) {
	return _RLNRegistry.Contract.Register(&_RLNRegistry.TransactOpts, storageIndex, commitment)
}

// Register0 is a paid mutator transaction binding the contract method 0x7a34289d.
//
// Solidity: function register(uint256[] commitments) returns()
func (_RLNRegistry *RLNRegistryTransactor) Register0(opts *bind.TransactOpts, commitments []*big.Int) (*types.Transaction, error) {
	return _RLNRegistry.contract.Transact(opts, "register0", commitments)
}

// Register0 is a paid mutator transaction binding the contract method 0x7a34289d.
//
// Solidity: function register(uint256[] commitments) returns()
func (_RLNRegistry *RLNRegistrySession) Register0(commitments []*big.Int) (*types.Transaction, error) {
	return _RLNRegistry.Contract.Register0(&_RLNRegistry.TransactOpts, commitments)
}

// Register0 is a paid mutator transaction binding the contract method 0x7a34289d.
//
// Solidity: function register(uint256[] commitments) returns()
func (_RLNRegistry *RLNRegistryTransactorSession) Register0(commitments []*big.Int) (*types.Transaction, error) {
	return _RLNRegistry.Contract.Register0(&_RLNRegistry.TransactOpts, commitments)
}

// Register1 is a paid mutator transaction binding the contract method 0xab02492a.
//
// Solidity: function register(uint16 storageIndex, uint256[] commitments) returns()
func (_RLNRegistry *RLNRegistryTransactor) Register1(opts *bind.TransactOpts, storageIndex uint16, commitments []*big.Int) (*types.Transaction, error) {
	return _RLNRegistry.contract.Transact(opts, "register1", storageIndex, commitments)
}

// Register1 is a paid mutator transaction binding the contract method 0xab02492a.
//
// Solidity: function register(uint16 storageIndex, uint256[] commitments) returns()
func (_RLNRegistry *RLNRegistrySession) Register1(storageIndex uint16, commitments []*big.Int) (*types.Transaction, error) {
	return _RLNRegistry.Contract.Register1(&_RLNRegistry.TransactOpts, storageIndex, commitments)
}

// Register1 is a paid mutator transaction binding the contract method 0xab02492a.
//
// Solidity: function register(uint16 storageIndex, uint256[] commitments) returns()
func (_RLNRegistry *RLNRegistryTransactorSession) Register1(storageIndex uint16, commitments []*big.Int) (*types.Transaction, error) {
	return _RLNRegistry.Contract.Register1(&_RLNRegistry.TransactOpts, storageIndex, commitments)
}

// RegisterStorage is a paid mutator transaction binding the contract method 0xef653d5e.
//
// Solidity: function registerStorage(address storageAddress) returns()
func (_RLNRegistry *RLNRegistryTransactor) RegisterStorage(opts *bind.TransactOpts, storageAddress common.Address) (*types.Transaction, error) {
	return _RLNRegistry.contract.Transact(opts, "registerStorage", storageAddress)
}

// RegisterStorage is a paid mutator transaction binding the contract method 0xef653d5e.
//
// Solidity: function registerStorage(address storageAddress) returns()
func (_RLNRegistry *RLNRegistrySession) RegisterStorage(storageAddress common.Address) (*types.Transaction, error) {
	return _RLNRegistry.Contract.RegisterStorage(&_RLNRegistry.TransactOpts, storageAddress)
}

// RegisterStorage is a paid mutator transaction binding the contract method 0xef653d5e.
//
// Solidity: function registerStorage(address storageAddress) returns()
func (_RLNRegistry *RLNRegistryTransactorSession) RegisterStorage(storageAddress common.Address) (*types.Transaction, error) {
	return _RLNRegistry.Contract.RegisterStorage(&_RLNRegistry.TransactOpts, storageAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RLNRegistry *RLNRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RLNRegistry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RLNRegistry *RLNRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _RLNRegistry.Contract.RenounceOwnership(&_RLNRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_RLNRegistry *RLNRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _RLNRegistry.Contract.RenounceOwnership(&_RLNRegistry.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RLNRegistry *RLNRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _RLNRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RLNRegistry *RLNRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RLNRegistry.Contract.TransferOwnership(&_RLNRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_RLNRegistry *RLNRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _RLNRegistry.Contract.TransferOwnership(&_RLNRegistry.TransactOpts, newOwner)
}

// RLNRegistryNewStorageContractIterator is returned from FilterNewStorageContract and is used to iterate over the raw logs and unpacked data for NewStorageContract events raised by the RLNRegistry contract.
type RLNRegistryNewStorageContractIterator struct {
	Event *RLNRegistryNewStorageContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RLNRegistryNewStorageContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RLNRegistryNewStorageContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RLNRegistryNewStorageContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RLNRegistryNewStorageContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RLNRegistryNewStorageContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RLNRegistryNewStorageContract represents a NewStorageContract event raised by the RLNRegistry contract.
type RLNRegistryNewStorageContract struct {
	Index          uint16
	StorageAddress common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterNewStorageContract is a free log retrieval operation binding the contract event 0xcf6a3b406170499209d0fcf152a1605c7c5a5c99c855e2bb803433fc960718eb.
//
// Solidity: event NewStorageContract(uint16 index, address storageAddress)
func (_RLNRegistry *RLNRegistryFilterer) FilterNewStorageContract(opts *bind.FilterOpts) (*RLNRegistryNewStorageContractIterator, error) {

	logs, sub, err := _RLNRegistry.contract.FilterLogs(opts, "NewStorageContract")
	if err != nil {
		return nil, err
	}
	return &RLNRegistryNewStorageContractIterator{contract: _RLNRegistry.contract, event: "NewStorageContract", logs: logs, sub: sub}, nil
}

// WatchNewStorageContract is a free log subscription operation binding the contract event 0xcf6a3b406170499209d0fcf152a1605c7c5a5c99c855e2bb803433fc960718eb.
//
// Solidity: event NewStorageContract(uint16 index, address storageAddress)
func (_RLNRegistry *RLNRegistryFilterer) WatchNewStorageContract(opts *bind.WatchOpts, sink chan<- *RLNRegistryNewStorageContract) (event.Subscription, error) {

	logs, sub, err := _RLNRegistry.contract.WatchLogs(opts, "NewStorageContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RLNRegistryNewStorageContract)
				if err := _RLNRegistry.contract.UnpackLog(event, "NewStorageContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewStorageContract is a log parse operation binding the contract event 0xcf6a3b406170499209d0fcf152a1605c7c5a5c99c855e2bb803433fc960718eb.
//
// Solidity: event NewStorageContract(uint16 index, address storageAddress)
func (_RLNRegistry *RLNRegistryFilterer) ParseNewStorageContract(log types.Log) (*RLNRegistryNewStorageContract, error) {
	event := new(RLNRegistryNewStorageContract)
	if err := _RLNRegistry.contract.UnpackLog(event, "NewStorageContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RLNRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the RLNRegistry contract.
type RLNRegistryOwnershipTransferredIterator struct {
	Event *RLNRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RLNRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RLNRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RLNRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RLNRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RLNRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RLNRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the RLNRegistry contract.
type RLNRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RLNRegistry *RLNRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RLNRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RLNRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RLNRegistryOwnershipTransferredIterator{contract: _RLNRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RLNRegistry *RLNRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RLNRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _RLNRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RLNRegistryOwnershipTransferred)
				if err := _RLNRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_RLNRegistry *RLNRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*RLNRegistryOwnershipTransferred, error) {
	event := new(RLNRegistryOwnershipTransferred)
	if err := _RLNRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
