// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steammessages_base.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package protobuf is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package protobuf to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EProtoClanEventType int32

const (
	EProtoClanEventType_k_EClanOtherEvent                  EProtoClanEventType = 1
	EProtoClanEventType_k_EClanGameEvent                   EProtoClanEventType = 2
	EProtoClanEventType_k_EClanPartyEvent                  EProtoClanEventType = 3
	EProtoClanEventType_k_EClanMeetingEvent                EProtoClanEventType = 4
	EProtoClanEventType_k_EClanSpecialCauseEvent           EProtoClanEventType = 5
	EProtoClanEventType_k_EClanMusicAndArtsEvent           EProtoClanEventType = 6
	EProtoClanEventType_k_EClanSportsEvent                 EProtoClanEventType = 7
	EProtoClanEventType_k_EClanTripEvent                   EProtoClanEventType = 8
	EProtoClanEventType_k_EClanChatEvent                   EProtoClanEventType = 9
	EProtoClanEventType_k_EClanGameReleaseEvent            EProtoClanEventType = 10
	EProtoClanEventType_k_EClanBroadcastEvent              EProtoClanEventType = 11
	EProtoClanEventType_k_EClanSmallUpdateEvent            EProtoClanEventType = 12
	EProtoClanEventType_k_EClanPreAnnounceMajorUpdateEvent EProtoClanEventType = 13
	EProtoClanEventType_k_EClanMajorUpdateEvent            EProtoClanEventType = 14
	EProtoClanEventType_k_EClanDLCReleaseEvent             EProtoClanEventType = 15
	EProtoClanEventType_k_EClanFutureReleaseEvent          EProtoClanEventType = 16
	EProtoClanEventType_k_EClanESportTournamentStreamEvent EProtoClanEventType = 17
	EProtoClanEventType_k_EClanDevStreamEvent              EProtoClanEventType = 18
	EProtoClanEventType_k_EClanFamousStreamEvent           EProtoClanEventType = 19
	EProtoClanEventType_k_EClanGameSalesEvent              EProtoClanEventType = 20
	EProtoClanEventType_k_EClanGameItemSalesEvent          EProtoClanEventType = 21
	EProtoClanEventType_k_EClanInGameBonusXPEvent          EProtoClanEventType = 22
	EProtoClanEventType_k_EClanInGameLootEvent             EProtoClanEventType = 23
	EProtoClanEventType_k_EClanInGamePerksEvent            EProtoClanEventType = 24
	EProtoClanEventType_k_EClanInGameChallengeEvent        EProtoClanEventType = 25
	EProtoClanEventType_k_EClanInGameContestEvent          EProtoClanEventType = 26
	EProtoClanEventType_k_EClanIRLEvent                    EProtoClanEventType = 27
	EProtoClanEventType_k_EClanNewsEvent                   EProtoClanEventType = 28
	EProtoClanEventType_k_EClanBetaReleaseEvent            EProtoClanEventType = 29
	EProtoClanEventType_k_EClanInGameContentReleaseEvent   EProtoClanEventType = 30
	EProtoClanEventType_k_EClanFreeTrial                   EProtoClanEventType = 31
	EProtoClanEventType_k_EClanSeasonRelease               EProtoClanEventType = 32
	EProtoClanEventType_k_EClanSeasonUpdate                EProtoClanEventType = 33
	EProtoClanEventType_k_EClanCrosspostEvent              EProtoClanEventType = 34
	EProtoClanEventType_k_EClanInGameEventGeneral          EProtoClanEventType = 35
)

var EProtoClanEventType_name = map[int32]string{
	1:  "k_EClanOtherEvent",
	2:  "k_EClanGameEvent",
	3:  "k_EClanPartyEvent",
	4:  "k_EClanMeetingEvent",
	5:  "k_EClanSpecialCauseEvent",
	6:  "k_EClanMusicAndArtsEvent",
	7:  "k_EClanSportsEvent",
	8:  "k_EClanTripEvent",
	9:  "k_EClanChatEvent",
	10: "k_EClanGameReleaseEvent",
	11: "k_EClanBroadcastEvent",
	12: "k_EClanSmallUpdateEvent",
	13: "k_EClanPreAnnounceMajorUpdateEvent",
	14: "k_EClanMajorUpdateEvent",
	15: "k_EClanDLCReleaseEvent",
	16: "k_EClanFutureReleaseEvent",
	17: "k_EClanESportTournamentStreamEvent",
	18: "k_EClanDevStreamEvent",
	19: "k_EClanFamousStreamEvent",
	20: "k_EClanGameSalesEvent",
	21: "k_EClanGameItemSalesEvent",
	22: "k_EClanInGameBonusXPEvent",
	23: "k_EClanInGameLootEvent",
	24: "k_EClanInGamePerksEvent",
	25: "k_EClanInGameChallengeEvent",
	26: "k_EClanInGameContestEvent",
	27: "k_EClanIRLEvent",
	28: "k_EClanNewsEvent",
	29: "k_EClanBetaReleaseEvent",
	30: "k_EClanInGameContentReleaseEvent",
	31: "k_EClanFreeTrial",
	32: "k_EClanSeasonRelease",
	33: "k_EClanSeasonUpdate",
	34: "k_EClanCrosspostEvent",
	35: "k_EClanInGameEventGeneral",
}

var EProtoClanEventType_value = map[string]int32{
	"k_EClanOtherEvent":                  1,
	"k_EClanGameEvent":                   2,
	"k_EClanPartyEvent":                  3,
	"k_EClanMeetingEvent":                4,
	"k_EClanSpecialCauseEvent":           5,
	"k_EClanMusicAndArtsEvent":           6,
	"k_EClanSportsEvent":                 7,
	"k_EClanTripEvent":                   8,
	"k_EClanChatEvent":                   9,
	"k_EClanGameReleaseEvent":            10,
	"k_EClanBroadcastEvent":              11,
	"k_EClanSmallUpdateEvent":            12,
	"k_EClanPreAnnounceMajorUpdateEvent": 13,
	"k_EClanMajorUpdateEvent":            14,
	"k_EClanDLCReleaseEvent":             15,
	"k_EClanFutureReleaseEvent":          16,
	"k_EClanESportTournamentStreamEvent": 17,
	"k_EClanDevStreamEvent":              18,
	"k_EClanFamousStreamEvent":           19,
	"k_EClanGameSalesEvent":              20,
	"k_EClanGameItemSalesEvent":          21,
	"k_EClanInGameBonusXPEvent":          22,
	"k_EClanInGameLootEvent":             23,
	"k_EClanInGamePerksEvent":            24,
	"k_EClanInGameChallengeEvent":        25,
	"k_EClanInGameContestEvent":          26,
	"k_EClanIRLEvent":                    27,
	"k_EClanNewsEvent":                   28,
	"k_EClanBetaReleaseEvent":            29,
	"k_EClanInGameContentReleaseEvent":   30,
	"k_EClanFreeTrial":                   31,
	"k_EClanSeasonRelease":               32,
	"k_EClanSeasonUpdate":                33,
	"k_EClanCrosspostEvent":              34,
	"k_EClanInGameEventGeneral":          35,
}

func (x EProtoClanEventType) Enum() *EProtoClanEventType {
	p := new(EProtoClanEventType)
	*p = x
	return p
}

func (x EProtoClanEventType) String() string {
	return proto.EnumName(EProtoClanEventType_name, int32(x))
}

func (x *EProtoClanEventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EProtoClanEventType_value, data, "EProtoClanEventType")
	if err != nil {
		return err
	}
	*x = EProtoClanEventType(value)
	return nil
}

func (EProtoClanEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{0}
}

type PartnerEventNotificationType int32

const (
	PartnerEventNotificationType_k_EEventStart          PartnerEventNotificationType = 0
	PartnerEventNotificationType_k_EEventBroadcastStart PartnerEventNotificationType = 1
	PartnerEventNotificationType_k_EEventMatchStart     PartnerEventNotificationType = 2
	PartnerEventNotificationType_k_EEventPartnerMaxType PartnerEventNotificationType = 3
)

var PartnerEventNotificationType_name = map[int32]string{
	0: "k_EEventStart",
	1: "k_EEventBroadcastStart",
	2: "k_EEventMatchStart",
	3: "k_EEventPartnerMaxType",
}

var PartnerEventNotificationType_value = map[string]int32{
	"k_EEventStart":          0,
	"k_EEventBroadcastStart": 1,
	"k_EEventMatchStart":     2,
	"k_EEventPartnerMaxType": 3,
}

func (x PartnerEventNotificationType) Enum() *PartnerEventNotificationType {
	p := new(PartnerEventNotificationType)
	*p = x
	return p
}

func (x PartnerEventNotificationType) String() string {
	return proto.EnumName(PartnerEventNotificationType_name, int32(x))
}

func (x *PartnerEventNotificationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PartnerEventNotificationType_value, data, "PartnerEventNotificationType")
	if err != nil {
		return err
	}
	*x = PartnerEventNotificationType(value)
	return nil
}

func (PartnerEventNotificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{1}
}

type CMsgIPAddress struct {
	// Types that are valid to be assigned to Ip:
	//	*CMsgIPAddress_V4
	//	*CMsgIPAddress_V6
	Ip                   isCMsgIPAddress_Ip `protobuf_oneof:"ip"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CMsgIPAddress) Reset()         { *m = CMsgIPAddress{} }
func (m *CMsgIPAddress) String() string { return proto.CompactTextString(m) }
func (*CMsgIPAddress) ProtoMessage()    {}
func (*CMsgIPAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{0}
}

func (m *CMsgIPAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgIPAddress.Unmarshal(m, b)
}
func (m *CMsgIPAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgIPAddress.Marshal(b, m, deterministic)
}
func (m *CMsgIPAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgIPAddress.Merge(m, src)
}
func (m *CMsgIPAddress) XXX_Size() int {
	return xxx_messageInfo_CMsgIPAddress.Size(m)
}
func (m *CMsgIPAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgIPAddress.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgIPAddress proto.InternalMessageInfo

type isCMsgIPAddress_Ip interface {
	isCMsgIPAddress_Ip()
}

type CMsgIPAddress_V4 struct {
	V4 uint32 `protobuf:"fixed32,1,opt,name=v4,oneof"`
}

type CMsgIPAddress_V6 struct {
	V6 []byte `protobuf:"bytes,2,opt,name=v6,oneof"`
}

func (*CMsgIPAddress_V4) isCMsgIPAddress_Ip() {}

func (*CMsgIPAddress_V6) isCMsgIPAddress_Ip() {}

func (m *CMsgIPAddress) GetIp() isCMsgIPAddress_Ip {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *CMsgIPAddress) GetV4() uint32 {
	if x, ok := m.GetIp().(*CMsgIPAddress_V4); ok {
		return x.V4
	}
	return 0
}

func (m *CMsgIPAddress) GetV6() []byte {
	if x, ok := m.GetIp().(*CMsgIPAddress_V6); ok {
		return x.V6
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CMsgIPAddress) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CMsgIPAddress_V4)(nil),
		(*CMsgIPAddress_V6)(nil),
	}
}

type CMsgIPAddressBucket struct {
	OriginalIpAddress    *CMsgIPAddress `protobuf:"bytes,1,opt,name=original_ip_address,json=originalIpAddress" json:"original_ip_address,omitempty"`
	Bucket               *uint64        `protobuf:"fixed64,2,opt,name=bucket" json:"bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CMsgIPAddressBucket) Reset()         { *m = CMsgIPAddressBucket{} }
func (m *CMsgIPAddressBucket) String() string { return proto.CompactTextString(m) }
func (*CMsgIPAddressBucket) ProtoMessage()    {}
func (*CMsgIPAddressBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{1}
}

func (m *CMsgIPAddressBucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgIPAddressBucket.Unmarshal(m, b)
}
func (m *CMsgIPAddressBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgIPAddressBucket.Marshal(b, m, deterministic)
}
func (m *CMsgIPAddressBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgIPAddressBucket.Merge(m, src)
}
func (m *CMsgIPAddressBucket) XXX_Size() int {
	return xxx_messageInfo_CMsgIPAddressBucket.Size(m)
}
func (m *CMsgIPAddressBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgIPAddressBucket.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgIPAddressBucket proto.InternalMessageInfo

func (m *CMsgIPAddressBucket) GetOriginalIpAddress() *CMsgIPAddress {
	if m != nil {
		return m.OriginalIpAddress
	}
	return nil
}

func (m *CMsgIPAddressBucket) GetBucket() uint64 {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return 0
}

type CMsgProtoBufHeader struct {
	Steamid              *uint64  `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ClientSessionid      *int32   `protobuf:"varint,2,opt,name=client_sessionid,json=clientSessionid" json:"client_sessionid,omitempty"`
	RoutingAppid         *uint32  `protobuf:"varint,3,opt,name=routing_appid,json=routingAppid" json:"routing_appid,omitempty"`
	JobidSource          *uint64  `protobuf:"fixed64,10,opt,name=jobid_source,json=jobidSource,def=18446744073709551615" json:"jobid_source,omitempty"`
	JobidTarget          *uint64  `protobuf:"fixed64,11,opt,name=jobid_target,json=jobidTarget,def=18446744073709551615" json:"jobid_target,omitempty"`
	TargetJobName        *string  `protobuf:"bytes,12,opt,name=target_job_name,json=targetJobName" json:"target_job_name,omitempty"`
	SeqNum               *int32   `protobuf:"varint,24,opt,name=seq_num,json=seqNum" json:"seq_num,omitempty"`
	Eresult              *int32   `protobuf:"varint,13,opt,name=eresult,def=2" json:"eresult,omitempty"`
	ErrorMessage         *string  `protobuf:"bytes,14,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	AuthAccountFlags     *uint32  `protobuf:"varint,16,opt,name=auth_account_flags,json=authAccountFlags" json:"auth_account_flags,omitempty"`
	TokenSource          *uint32  `protobuf:"varint,22,opt,name=token_source,json=tokenSource" json:"token_source,omitempty"`
	AdminSpoofingUser    *bool    `protobuf:"varint,23,opt,name=admin_spoofing_user,json=adminSpoofingUser" json:"admin_spoofing_user,omitempty"`
	TransportError       *int32   `protobuf:"varint,17,opt,name=transport_error,json=transportError,def=1" json:"transport_error,omitempty"`
	Messageid            *uint64  `protobuf:"varint,18,opt,name=messageid,def=18446744073709551615" json:"messageid,omitempty"`
	PublisherGroupId     *uint32  `protobuf:"varint,19,opt,name=publisher_group_id,json=publisherGroupId" json:"publisher_group_id,omitempty"`
	Sysid                *uint32  `protobuf:"varint,20,opt,name=sysid" json:"sysid,omitempty"`
	TraceTag             *uint64  `protobuf:"varint,21,opt,name=trace_tag,json=traceTag" json:"trace_tag,omitempty"`
	WebapiKeyId          *uint32  `protobuf:"varint,25,opt,name=webapi_key_id,json=webapiKeyId" json:"webapi_key_id,omitempty"`
	IsFromExternalSource *bool    `protobuf:"varint,26,opt,name=is_from_external_source,json=isFromExternalSource" json:"is_from_external_source,omitempty"`
	ForwardToSysid       []uint32 `protobuf:"varint,27,rep,name=forward_to_sysid,json=forwardToSysid" json:"forward_to_sysid,omitempty"`
	CmSysid              *uint32  `protobuf:"varint,28,opt,name=cm_sysid,json=cmSysid" json:"cm_sysid,omitempty"`
	WgToken              *string  `protobuf:"bytes,30,opt,name=wg_token,json=wgToken" json:"wg_token,omitempty"`
	LauncherType         *uint32  `protobuf:"varint,31,opt,name=launcher_type,json=launcherType,def=0" json:"launcher_type,omitempty"`
	Realm                *uint32  `protobuf:"varint,32,opt,name=realm,def=0" json:"realm,omitempty"`
	// Types that are valid to be assigned to IpAddr:
	//	*CMsgProtoBufHeader_Ip
	//	*CMsgProtoBufHeader_IpV6
	IpAddr               isCMsgProtoBufHeader_IpAddr `protobuf_oneof:"ip_addr"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CMsgProtoBufHeader) Reset()         { *m = CMsgProtoBufHeader{} }
func (m *CMsgProtoBufHeader) String() string { return proto.CompactTextString(m) }
func (*CMsgProtoBufHeader) ProtoMessage()    {}
func (*CMsgProtoBufHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{2}
}

func (m *CMsgProtoBufHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgProtoBufHeader.Unmarshal(m, b)
}
func (m *CMsgProtoBufHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgProtoBufHeader.Marshal(b, m, deterministic)
}
func (m *CMsgProtoBufHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgProtoBufHeader.Merge(m, src)
}
func (m *CMsgProtoBufHeader) XXX_Size() int {
	return xxx_messageInfo_CMsgProtoBufHeader.Size(m)
}
func (m *CMsgProtoBufHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgProtoBufHeader.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgProtoBufHeader proto.InternalMessageInfo

const Default_CMsgProtoBufHeader_JobidSource uint64 = 18446744073709551615
const Default_CMsgProtoBufHeader_JobidTarget uint64 = 18446744073709551615
const Default_CMsgProtoBufHeader_Eresult int32 = 2
const Default_CMsgProtoBufHeader_TransportError int32 = 1
const Default_CMsgProtoBufHeader_Messageid uint64 = 18446744073709551615
const Default_CMsgProtoBufHeader_LauncherType uint32 = 0
const Default_CMsgProtoBufHeader_Realm uint32 = 0

func (m *CMsgProtoBufHeader) GetSteamid() uint64 {
	if m != nil && m.Steamid != nil {
		return *m.Steamid
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetClientSessionid() int32 {
	if m != nil && m.ClientSessionid != nil {
		return *m.ClientSessionid
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetRoutingAppid() uint32 {
	if m != nil && m.RoutingAppid != nil {
		return *m.RoutingAppid
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetJobidSource() uint64 {
	if m != nil && m.JobidSource != nil {
		return *m.JobidSource
	}
	return Default_CMsgProtoBufHeader_JobidSource
}

func (m *CMsgProtoBufHeader) GetJobidTarget() uint64 {
	if m != nil && m.JobidTarget != nil {
		return *m.JobidTarget
	}
	return Default_CMsgProtoBufHeader_JobidTarget
}

func (m *CMsgProtoBufHeader) GetTargetJobName() string {
	if m != nil && m.TargetJobName != nil {
		return *m.TargetJobName
	}
	return ""
}

func (m *CMsgProtoBufHeader) GetSeqNum() int32 {
	if m != nil && m.SeqNum != nil {
		return *m.SeqNum
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetEresult() int32 {
	if m != nil && m.Eresult != nil {
		return *m.Eresult
	}
	return Default_CMsgProtoBufHeader_Eresult
}

func (m *CMsgProtoBufHeader) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *CMsgProtoBufHeader) GetAuthAccountFlags() uint32 {
	if m != nil && m.AuthAccountFlags != nil {
		return *m.AuthAccountFlags
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetTokenSource() uint32 {
	if m != nil && m.TokenSource != nil {
		return *m.TokenSource
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetAdminSpoofingUser() bool {
	if m != nil && m.AdminSpoofingUser != nil {
		return *m.AdminSpoofingUser
	}
	return false
}

func (m *CMsgProtoBufHeader) GetTransportError() int32 {
	if m != nil && m.TransportError != nil {
		return *m.TransportError
	}
	return Default_CMsgProtoBufHeader_TransportError
}

func (m *CMsgProtoBufHeader) GetMessageid() uint64 {
	if m != nil && m.Messageid != nil {
		return *m.Messageid
	}
	return Default_CMsgProtoBufHeader_Messageid
}

func (m *CMsgProtoBufHeader) GetPublisherGroupId() uint32 {
	if m != nil && m.PublisherGroupId != nil {
		return *m.PublisherGroupId
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetSysid() uint32 {
	if m != nil && m.Sysid != nil {
		return *m.Sysid
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetTraceTag() uint64 {
	if m != nil && m.TraceTag != nil {
		return *m.TraceTag
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetWebapiKeyId() uint32 {
	if m != nil && m.WebapiKeyId != nil {
		return *m.WebapiKeyId
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetIsFromExternalSource() bool {
	if m != nil && m.IsFromExternalSource != nil {
		return *m.IsFromExternalSource
	}
	return false
}

func (m *CMsgProtoBufHeader) GetForwardToSysid() []uint32 {
	if m != nil {
		return m.ForwardToSysid
	}
	return nil
}

func (m *CMsgProtoBufHeader) GetCmSysid() uint32 {
	if m != nil && m.CmSysid != nil {
		return *m.CmSysid
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetWgToken() string {
	if m != nil && m.WgToken != nil {
		return *m.WgToken
	}
	return ""
}

func (m *CMsgProtoBufHeader) GetLauncherType() uint32 {
	if m != nil && m.LauncherType != nil {
		return *m.LauncherType
	}
	return Default_CMsgProtoBufHeader_LauncherType
}

func (m *CMsgProtoBufHeader) GetRealm() uint32 {
	if m != nil && m.Realm != nil {
		return *m.Realm
	}
	return Default_CMsgProtoBufHeader_Realm
}

type isCMsgProtoBufHeader_IpAddr interface {
	isCMsgProtoBufHeader_IpAddr()
}

type CMsgProtoBufHeader_Ip struct {
	Ip uint32 `protobuf:"varint,15,opt,name=ip,oneof"`
}

type CMsgProtoBufHeader_IpV6 struct {
	IpV6 []byte `protobuf:"bytes,29,opt,name=ip_v6,json=ipV6,oneof"`
}

func (*CMsgProtoBufHeader_Ip) isCMsgProtoBufHeader_IpAddr() {}

func (*CMsgProtoBufHeader_IpV6) isCMsgProtoBufHeader_IpAddr() {}

func (m *CMsgProtoBufHeader) GetIpAddr() isCMsgProtoBufHeader_IpAddr {
	if m != nil {
		return m.IpAddr
	}
	return nil
}

func (m *CMsgProtoBufHeader) GetIp() uint32 {
	if x, ok := m.GetIpAddr().(*CMsgProtoBufHeader_Ip); ok {
		return x.Ip
	}
	return 0
}

func (m *CMsgProtoBufHeader) GetIpV6() []byte {
	if x, ok := m.GetIpAddr().(*CMsgProtoBufHeader_IpV6); ok {
		return x.IpV6
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CMsgProtoBufHeader) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CMsgProtoBufHeader_Ip)(nil),
		(*CMsgProtoBufHeader_IpV6)(nil),
	}
}

type CMsgMulti struct {
	SizeUnzipped         *uint32  `protobuf:"varint,1,opt,name=size_unzipped,json=sizeUnzipped" json:"size_unzipped,omitempty"`
	MessageBody          []byte   `protobuf:"bytes,2,opt,name=message_body,json=messageBody" json:"message_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgMulti) Reset()         { *m = CMsgMulti{} }
func (m *CMsgMulti) String() string { return proto.CompactTextString(m) }
func (*CMsgMulti) ProtoMessage()    {}
func (*CMsgMulti) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{3}
}

func (m *CMsgMulti) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgMulti.Unmarshal(m, b)
}
func (m *CMsgMulti) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgMulti.Marshal(b, m, deterministic)
}
func (m *CMsgMulti) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgMulti.Merge(m, src)
}
func (m *CMsgMulti) XXX_Size() int {
	return xxx_messageInfo_CMsgMulti.Size(m)
}
func (m *CMsgMulti) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgMulti.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgMulti proto.InternalMessageInfo

func (m *CMsgMulti) GetSizeUnzipped() uint32 {
	if m != nil && m.SizeUnzipped != nil {
		return *m.SizeUnzipped
	}
	return 0
}

func (m *CMsgMulti) GetMessageBody() []byte {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

type CMsgProtobufWrapped struct {
	MessageBody          []byte   `protobuf:"bytes,1,opt,name=message_body,json=messageBody" json:"message_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgProtobufWrapped) Reset()         { *m = CMsgProtobufWrapped{} }
func (m *CMsgProtobufWrapped) String() string { return proto.CompactTextString(m) }
func (*CMsgProtobufWrapped) ProtoMessage()    {}
func (*CMsgProtobufWrapped) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{4}
}

func (m *CMsgProtobufWrapped) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgProtobufWrapped.Unmarshal(m, b)
}
func (m *CMsgProtobufWrapped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgProtobufWrapped.Marshal(b, m, deterministic)
}
func (m *CMsgProtobufWrapped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgProtobufWrapped.Merge(m, src)
}
func (m *CMsgProtobufWrapped) XXX_Size() int {
	return xxx_messageInfo_CMsgProtobufWrapped.Size(m)
}
func (m *CMsgProtobufWrapped) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgProtobufWrapped.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgProtobufWrapped proto.InternalMessageInfo

func (m *CMsgProtobufWrapped) GetMessageBody() []byte {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

type CMsgAuthTicket struct {
	Estate               *uint32  `protobuf:"varint,1,opt,name=estate" json:"estate,omitempty"`
	Eresult              *uint32  `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Steamid              *uint64  `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
	Gameid               *uint64  `protobuf:"fixed64,4,opt,name=gameid" json:"gameid,omitempty"`
	HSteamPipe           *uint32  `protobuf:"varint,5,opt,name=h_steam_pipe,json=hSteamPipe" json:"h_steam_pipe,omitempty"`
	TicketCrc            *uint32  `protobuf:"varint,6,opt,name=ticket_crc,json=ticketCrc" json:"ticket_crc,omitempty"`
	Ticket               []byte   `protobuf:"bytes,7,opt,name=ticket" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CMsgAuthTicket) Reset()         { *m = CMsgAuthTicket{} }
func (m *CMsgAuthTicket) String() string { return proto.CompactTextString(m) }
func (*CMsgAuthTicket) ProtoMessage()    {}
func (*CMsgAuthTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{5}
}

func (m *CMsgAuthTicket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgAuthTicket.Unmarshal(m, b)
}
func (m *CMsgAuthTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgAuthTicket.Marshal(b, m, deterministic)
}
func (m *CMsgAuthTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgAuthTicket.Merge(m, src)
}
func (m *CMsgAuthTicket) XXX_Size() int {
	return xxx_messageInfo_CMsgAuthTicket.Size(m)
}
func (m *CMsgAuthTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgAuthTicket.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgAuthTicket proto.InternalMessageInfo

const Default_CMsgAuthTicket_Eresult uint32 = 2

func (m *CMsgAuthTicket) GetEstate() uint32 {
	if m != nil && m.Estate != nil {
		return *m.Estate
	}
	return 0
}

func (m *CMsgAuthTicket) GetEresult() uint32 {
	if m != nil && m.Eresult != nil {
		return *m.Eresult
	}
	return Default_CMsgAuthTicket_Eresult
}

func (m *CMsgAuthTicket) GetSteamid() uint64 {
	if m != nil && m.Steamid != nil {
		return *m.Steamid
	}
	return 0
}

func (m *CMsgAuthTicket) GetGameid() uint64 {
	if m != nil && m.Gameid != nil {
		return *m.Gameid
	}
	return 0
}

func (m *CMsgAuthTicket) GetHSteamPipe() uint32 {
	if m != nil && m.HSteamPipe != nil {
		return *m.HSteamPipe
	}
	return 0
}

func (m *CMsgAuthTicket) GetTicketCrc() uint32 {
	if m != nil && m.TicketCrc != nil {
		return *m.TicketCrc
	}
	return 0
}

func (m *CMsgAuthTicket) GetTicket() []byte {
	if m != nil {
		return m.Ticket
	}
	return nil
}

type CCDDBAppDetailCommon struct {
	Appid                 *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name                  *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Icon                  *string  `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Logo                  *string  `protobuf:"bytes,4,opt,name=logo" json:"logo,omitempty"`
	LogoSmall             *string  `protobuf:"bytes,5,opt,name=logo_small,json=logoSmall" json:"logo_small,omitempty"`
	Tool                  *bool    `protobuf:"varint,6,opt,name=tool" json:"tool,omitempty"`
	Demo                  *bool    `protobuf:"varint,7,opt,name=demo" json:"demo,omitempty"`
	Media                 *bool    `protobuf:"varint,8,opt,name=media" json:"media,omitempty"`
	CommunityVisibleStats *bool    `protobuf:"varint,9,opt,name=community_visible_stats,json=communityVisibleStats" json:"community_visible_stats,omitempty"`
	FriendlyName          *string  `protobuf:"bytes,10,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Propagation           *string  `protobuf:"bytes,11,opt,name=propagation" json:"propagation,omitempty"`
	HasAdultContent       *bool    `protobuf:"varint,12,opt,name=has_adult_content,json=hasAdultContent" json:"has_adult_content,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *CCDDBAppDetailCommon) Reset()         { *m = CCDDBAppDetailCommon{} }
func (m *CCDDBAppDetailCommon) String() string { return proto.CompactTextString(m) }
func (*CCDDBAppDetailCommon) ProtoMessage()    {}
func (*CCDDBAppDetailCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{6}
}

func (m *CCDDBAppDetailCommon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCDDBAppDetailCommon.Unmarshal(m, b)
}
func (m *CCDDBAppDetailCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCDDBAppDetailCommon.Marshal(b, m, deterministic)
}
func (m *CCDDBAppDetailCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCDDBAppDetailCommon.Merge(m, src)
}
func (m *CCDDBAppDetailCommon) XXX_Size() int {
	return xxx_messageInfo_CCDDBAppDetailCommon.Size(m)
}
func (m *CCDDBAppDetailCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_CCDDBAppDetailCommon.DiscardUnknown(m)
}

var xxx_messageInfo_CCDDBAppDetailCommon proto.InternalMessageInfo

func (m *CCDDBAppDetailCommon) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CCDDBAppDetailCommon) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CCDDBAppDetailCommon) GetIcon() string {
	if m != nil && m.Icon != nil {
		return *m.Icon
	}
	return ""
}

func (m *CCDDBAppDetailCommon) GetLogo() string {
	if m != nil && m.Logo != nil {
		return *m.Logo
	}
	return ""
}

func (m *CCDDBAppDetailCommon) GetLogoSmall() string {
	if m != nil && m.LogoSmall != nil {
		return *m.LogoSmall
	}
	return ""
}

func (m *CCDDBAppDetailCommon) GetTool() bool {
	if m != nil && m.Tool != nil {
		return *m.Tool
	}
	return false
}

func (m *CCDDBAppDetailCommon) GetDemo() bool {
	if m != nil && m.Demo != nil {
		return *m.Demo
	}
	return false
}

func (m *CCDDBAppDetailCommon) GetMedia() bool {
	if m != nil && m.Media != nil {
		return *m.Media
	}
	return false
}

func (m *CCDDBAppDetailCommon) GetCommunityVisibleStats() bool {
	if m != nil && m.CommunityVisibleStats != nil {
		return *m.CommunityVisibleStats
	}
	return false
}

func (m *CCDDBAppDetailCommon) GetFriendlyName() string {
	if m != nil && m.FriendlyName != nil {
		return *m.FriendlyName
	}
	return ""
}

func (m *CCDDBAppDetailCommon) GetPropagation() string {
	if m != nil && m.Propagation != nil {
		return *m.Propagation
	}
	return ""
}

func (m *CCDDBAppDetailCommon) GetHasAdultContent() bool {
	if m != nil && m.HasAdultContent != nil {
		return *m.HasAdultContent
	}
	return false
}

type CMsgAppRights struct {
	EditInfo                 *bool    `protobuf:"varint,1,opt,name=edit_info,json=editInfo" json:"edit_info,omitempty"`
	Publish                  *bool    `protobuf:"varint,2,opt,name=publish" json:"publish,omitempty"`
	ViewErrorData            *bool    `protobuf:"varint,3,opt,name=view_error_data,json=viewErrorData" json:"view_error_data,omitempty"`
	Download                 *bool    `protobuf:"varint,4,opt,name=download" json:"download,omitempty"`
	UploadCdkeys             *bool    `protobuf:"varint,5,opt,name=upload_cdkeys,json=uploadCdkeys" json:"upload_cdkeys,omitempty"`
	GenerateCdkeys           *bool    `protobuf:"varint,6,opt,name=generate_cdkeys,json=generateCdkeys" json:"generate_cdkeys,omitempty"`
	ViewFinancials           *bool    `protobuf:"varint,7,opt,name=view_financials,json=viewFinancials" json:"view_financials,omitempty"`
	ManageCeg                *bool    `protobuf:"varint,8,opt,name=manage_ceg,json=manageCeg" json:"manage_ceg,omitempty"`
	ManageSigning            *bool    `protobuf:"varint,9,opt,name=manage_signing,json=manageSigning" json:"manage_signing,omitempty"`
	ManageCdkeys             *bool    `protobuf:"varint,10,opt,name=manage_cdkeys,json=manageCdkeys" json:"manage_cdkeys,omitempty"`
	EditMarketing            *bool    `protobuf:"varint,11,opt,name=edit_marketing,json=editMarketing" json:"edit_marketing,omitempty"`
	EconomySupport           *bool    `protobuf:"varint,12,opt,name=economy_support,json=economySupport" json:"economy_support,omitempty"`
	EconomySupportSupervisor *bool    `protobuf:"varint,13,opt,name=economy_support_supervisor,json=economySupportSupervisor" json:"economy_support_supervisor,omitempty"`
	ManagePricing            *bool    `protobuf:"varint,14,opt,name=manage_pricing,json=managePricing" json:"manage_pricing,omitempty"`
	BroadcastLive            *bool    `protobuf:"varint,15,opt,name=broadcast_live,json=broadcastLive" json:"broadcast_live,omitempty"`
	ViewMarketingTraffic     *bool    `protobuf:"varint,16,opt,name=view_marketing_traffic,json=viewMarketingTraffic" json:"view_marketing_traffic,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *CMsgAppRights) Reset()         { *m = CMsgAppRights{} }
func (m *CMsgAppRights) String() string { return proto.CompactTextString(m) }
func (*CMsgAppRights) ProtoMessage()    {}
func (*CMsgAppRights) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{7}
}

func (m *CMsgAppRights) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CMsgAppRights.Unmarshal(m, b)
}
func (m *CMsgAppRights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CMsgAppRights.Marshal(b, m, deterministic)
}
func (m *CMsgAppRights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CMsgAppRights.Merge(m, src)
}
func (m *CMsgAppRights) XXX_Size() int {
	return xxx_messageInfo_CMsgAppRights.Size(m)
}
func (m *CMsgAppRights) XXX_DiscardUnknown() {
	xxx_messageInfo_CMsgAppRights.DiscardUnknown(m)
}

var xxx_messageInfo_CMsgAppRights proto.InternalMessageInfo

func (m *CMsgAppRights) GetEditInfo() bool {
	if m != nil && m.EditInfo != nil {
		return *m.EditInfo
	}
	return false
}

func (m *CMsgAppRights) GetPublish() bool {
	if m != nil && m.Publish != nil {
		return *m.Publish
	}
	return false
}

func (m *CMsgAppRights) GetViewErrorData() bool {
	if m != nil && m.ViewErrorData != nil {
		return *m.ViewErrorData
	}
	return false
}

func (m *CMsgAppRights) GetDownload() bool {
	if m != nil && m.Download != nil {
		return *m.Download
	}
	return false
}

func (m *CMsgAppRights) GetUploadCdkeys() bool {
	if m != nil && m.UploadCdkeys != nil {
		return *m.UploadCdkeys
	}
	return false
}

func (m *CMsgAppRights) GetGenerateCdkeys() bool {
	if m != nil && m.GenerateCdkeys != nil {
		return *m.GenerateCdkeys
	}
	return false
}

func (m *CMsgAppRights) GetViewFinancials() bool {
	if m != nil && m.ViewFinancials != nil {
		return *m.ViewFinancials
	}
	return false
}

func (m *CMsgAppRights) GetManageCeg() bool {
	if m != nil && m.ManageCeg != nil {
		return *m.ManageCeg
	}
	return false
}

func (m *CMsgAppRights) GetManageSigning() bool {
	if m != nil && m.ManageSigning != nil {
		return *m.ManageSigning
	}
	return false
}

func (m *CMsgAppRights) GetManageCdkeys() bool {
	if m != nil && m.ManageCdkeys != nil {
		return *m.ManageCdkeys
	}
	return false
}

func (m *CMsgAppRights) GetEditMarketing() bool {
	if m != nil && m.EditMarketing != nil {
		return *m.EditMarketing
	}
	return false
}

func (m *CMsgAppRights) GetEconomySupport() bool {
	if m != nil && m.EconomySupport != nil {
		return *m.EconomySupport
	}
	return false
}

func (m *CMsgAppRights) GetEconomySupportSupervisor() bool {
	if m != nil && m.EconomySupportSupervisor != nil {
		return *m.EconomySupportSupervisor
	}
	return false
}

func (m *CMsgAppRights) GetManagePricing() bool {
	if m != nil && m.ManagePricing != nil {
		return *m.ManagePricing
	}
	return false
}

func (m *CMsgAppRights) GetBroadcastLive() bool {
	if m != nil && m.BroadcastLive != nil {
		return *m.BroadcastLive
	}
	return false
}

func (m *CMsgAppRights) GetViewMarketingTraffic() bool {
	if m != nil && m.ViewMarketingTraffic != nil {
		return *m.ViewMarketingTraffic
	}
	return false
}

type CCuratorPreferences struct {
	SupportedLanguages   *uint32  `protobuf:"varint,1,opt,name=supported_languages,json=supportedLanguages" json:"supported_languages,omitempty"`
	PlatformWindows      *bool    `protobuf:"varint,2,opt,name=platform_windows,json=platformWindows" json:"platform_windows,omitempty"`
	PlatformMac          *bool    `protobuf:"varint,3,opt,name=platform_mac,json=platformMac" json:"platform_mac,omitempty"`
	PlatformLinux        *bool    `protobuf:"varint,4,opt,name=platform_linux,json=platformLinux" json:"platform_linux,omitempty"`
	VrContent            *bool    `protobuf:"varint,5,opt,name=vr_content,json=vrContent" json:"vr_content,omitempty"`
	AdultContentViolence *bool    `protobuf:"varint,6,opt,name=adult_content_violence,json=adultContentViolence" json:"adult_content_violence,omitempty"`
	AdultContentSex      *bool    `protobuf:"varint,7,opt,name=adult_content_sex,json=adultContentSex" json:"adult_content_sex,omitempty"`
	TimestampUpdated     *uint32  `protobuf:"varint,8,opt,name=timestamp_updated,json=timestampUpdated" json:"timestamp_updated,omitempty"`
	TagidsCurated        []uint32 `protobuf:"varint,9,rep,name=tagids_curated,json=tagidsCurated" json:"tagids_curated,omitempty"`
	TagidsFiltered       []uint32 `protobuf:"varint,10,rep,name=tagids_filtered,json=tagidsFiltered" json:"tagids_filtered,omitempty"`
	WebsiteTitle         *string  `protobuf:"bytes,11,opt,name=website_title,json=websiteTitle" json:"website_title,omitempty"`
	WebsiteUrl           *string  `protobuf:"bytes,12,opt,name=website_url,json=websiteUrl" json:"website_url,omitempty"`
	DiscussionUrl        *string  `protobuf:"bytes,13,opt,name=discussion_url,json=discussionUrl" json:"discussion_url,omitempty"`
	ShowBroadcast        *bool    `protobuf:"varint,14,opt,name=show_broadcast,json=showBroadcast" json:"show_broadcast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCuratorPreferences) Reset()         { *m = CCuratorPreferences{} }
func (m *CCuratorPreferences) String() string { return proto.CompactTextString(m) }
func (*CCuratorPreferences) ProtoMessage()    {}
func (*CCuratorPreferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{8}
}

func (m *CCuratorPreferences) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCuratorPreferences.Unmarshal(m, b)
}
func (m *CCuratorPreferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCuratorPreferences.Marshal(b, m, deterministic)
}
func (m *CCuratorPreferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCuratorPreferences.Merge(m, src)
}
func (m *CCuratorPreferences) XXX_Size() int {
	return xxx_messageInfo_CCuratorPreferences.Size(m)
}
func (m *CCuratorPreferences) XXX_DiscardUnknown() {
	xxx_messageInfo_CCuratorPreferences.DiscardUnknown(m)
}

var xxx_messageInfo_CCuratorPreferences proto.InternalMessageInfo

func (m *CCuratorPreferences) GetSupportedLanguages() uint32 {
	if m != nil && m.SupportedLanguages != nil {
		return *m.SupportedLanguages
	}
	return 0
}

func (m *CCuratorPreferences) GetPlatformWindows() bool {
	if m != nil && m.PlatformWindows != nil {
		return *m.PlatformWindows
	}
	return false
}

func (m *CCuratorPreferences) GetPlatformMac() bool {
	if m != nil && m.PlatformMac != nil {
		return *m.PlatformMac
	}
	return false
}

func (m *CCuratorPreferences) GetPlatformLinux() bool {
	if m != nil && m.PlatformLinux != nil {
		return *m.PlatformLinux
	}
	return false
}

func (m *CCuratorPreferences) GetVrContent() bool {
	if m != nil && m.VrContent != nil {
		return *m.VrContent
	}
	return false
}

func (m *CCuratorPreferences) GetAdultContentViolence() bool {
	if m != nil && m.AdultContentViolence != nil {
		return *m.AdultContentViolence
	}
	return false
}

func (m *CCuratorPreferences) GetAdultContentSex() bool {
	if m != nil && m.AdultContentSex != nil {
		return *m.AdultContentSex
	}
	return false
}

func (m *CCuratorPreferences) GetTimestampUpdated() uint32 {
	if m != nil && m.TimestampUpdated != nil {
		return *m.TimestampUpdated
	}
	return 0
}

func (m *CCuratorPreferences) GetTagidsCurated() []uint32 {
	if m != nil {
		return m.TagidsCurated
	}
	return nil
}

func (m *CCuratorPreferences) GetTagidsFiltered() []uint32 {
	if m != nil {
		return m.TagidsFiltered
	}
	return nil
}

func (m *CCuratorPreferences) GetWebsiteTitle() string {
	if m != nil && m.WebsiteTitle != nil {
		return *m.WebsiteTitle
	}
	return ""
}

func (m *CCuratorPreferences) GetWebsiteUrl() string {
	if m != nil && m.WebsiteUrl != nil {
		return *m.WebsiteUrl
	}
	return ""
}

func (m *CCuratorPreferences) GetDiscussionUrl() string {
	if m != nil && m.DiscussionUrl != nil {
		return *m.DiscussionUrl
	}
	return ""
}

func (m *CCuratorPreferences) GetShowBroadcast() bool {
	if m != nil && m.ShowBroadcast != nil {
		return *m.ShowBroadcast
	}
	return false
}

type CLocalizationToken struct {
	Language             *uint32  `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
	LocalizedString      *string  `protobuf:"bytes,2,opt,name=localized_string,json=localizedString" json:"localized_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLocalizationToken) Reset()         { *m = CLocalizationToken{} }
func (m *CLocalizationToken) String() string { return proto.CompactTextString(m) }
func (*CLocalizationToken) ProtoMessage()    {}
func (*CLocalizationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{9}
}

func (m *CLocalizationToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLocalizationToken.Unmarshal(m, b)
}
func (m *CLocalizationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLocalizationToken.Marshal(b, m, deterministic)
}
func (m *CLocalizationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLocalizationToken.Merge(m, src)
}
func (m *CLocalizationToken) XXX_Size() int {
	return xxx_messageInfo_CLocalizationToken.Size(m)
}
func (m *CLocalizationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_CLocalizationToken.DiscardUnknown(m)
}

var xxx_messageInfo_CLocalizationToken proto.InternalMessageInfo

func (m *CLocalizationToken) GetLanguage() uint32 {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return 0
}

func (m *CLocalizationToken) GetLocalizedString() string {
	if m != nil && m.LocalizedString != nil {
		return *m.LocalizedString
	}
	return ""
}

type CClanEventUserNewsTuple struct {
	Clanid               *uint32  `protobuf:"varint,1,opt,name=clanid" json:"clanid,omitempty"`
	EventGid             *uint64  `protobuf:"fixed64,2,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	AnnouncementGid      *uint64  `protobuf:"fixed64,3,opt,name=announcement_gid,json=announcementGid" json:"announcement_gid,omitempty"`
	RtimeStart           *uint32  `protobuf:"varint,4,opt,name=rtime_start,json=rtimeStart" json:"rtime_start,omitempty"`
	RtimeEnd             *uint32  `protobuf:"varint,5,opt,name=rtime_end,json=rtimeEnd" json:"rtime_end,omitempty"`
	PriorityScore        *uint32  `protobuf:"varint,6,opt,name=priority_score,json=priorityScore" json:"priority_score,omitempty"`
	Type                 *uint32  `protobuf:"varint,7,opt,name=type" json:"type,omitempty"`
	ClampRangeSlot       *uint32  `protobuf:"varint,8,opt,name=clamp_range_slot,json=clampRangeSlot" json:"clamp_range_slot,omitempty"`
	Appid                *uint32  `protobuf:"varint,9,opt,name=appid" json:"appid,omitempty"`
	Rtime32LastModified  *uint32  `protobuf:"varint,10,opt,name=rtime32_last_modified,json=rtime32LastModified" json:"rtime32_last_modified,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CClanEventUserNewsTuple) Reset()         { *m = CClanEventUserNewsTuple{} }
func (m *CClanEventUserNewsTuple) String() string { return proto.CompactTextString(m) }
func (*CClanEventUserNewsTuple) ProtoMessage()    {}
func (*CClanEventUserNewsTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{10}
}

func (m *CClanEventUserNewsTuple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CClanEventUserNewsTuple.Unmarshal(m, b)
}
func (m *CClanEventUserNewsTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CClanEventUserNewsTuple.Marshal(b, m, deterministic)
}
func (m *CClanEventUserNewsTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CClanEventUserNewsTuple.Merge(m, src)
}
func (m *CClanEventUserNewsTuple) XXX_Size() int {
	return xxx_messageInfo_CClanEventUserNewsTuple.Size(m)
}
func (m *CClanEventUserNewsTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_CClanEventUserNewsTuple.DiscardUnknown(m)
}

var xxx_messageInfo_CClanEventUserNewsTuple proto.InternalMessageInfo

func (m *CClanEventUserNewsTuple) GetClanid() uint32 {
	if m != nil && m.Clanid != nil {
		return *m.Clanid
	}
	return 0
}

func (m *CClanEventUserNewsTuple) GetEventGid() uint64 {
	if m != nil && m.EventGid != nil {
		return *m.EventGid
	}
	return 0
}

func (m *CClanEventUserNewsTuple) GetAnnouncementGid() uint64 {
	if m != nil && m.AnnouncementGid != nil {
		return *m.AnnouncementGid
	}
	return 0
}

func (m *CClanEventUserNewsTuple) GetRtimeStart() uint32 {
	if m != nil && m.RtimeStart != nil {
		return *m.RtimeStart
	}
	return 0
}

func (m *CClanEventUserNewsTuple) GetRtimeEnd() uint32 {
	if m != nil && m.RtimeEnd != nil {
		return *m.RtimeEnd
	}
	return 0
}

func (m *CClanEventUserNewsTuple) GetPriorityScore() uint32 {
	if m != nil && m.PriorityScore != nil {
		return *m.PriorityScore
	}
	return 0
}

func (m *CClanEventUserNewsTuple) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CClanEventUserNewsTuple) GetClampRangeSlot() uint32 {
	if m != nil && m.ClampRangeSlot != nil {
		return *m.ClampRangeSlot
	}
	return 0
}

func (m *CClanEventUserNewsTuple) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CClanEventUserNewsTuple) GetRtime32LastModified() uint32 {
	if m != nil && m.Rtime32LastModified != nil {
		return *m.Rtime32LastModified
	}
	return 0
}

type CClanMatchEventByRange struct {
	RtimeBefore          *uint32                    `protobuf:"varint,1,opt,name=rtime_before,json=rtimeBefore" json:"rtime_before,omitempty"`
	RtimeAfter           *uint32                    `protobuf:"varint,2,opt,name=rtime_after,json=rtimeAfter" json:"rtime_after,omitempty"`
	Qualified            *uint32                    `protobuf:"varint,3,opt,name=qualified" json:"qualified,omitempty"`
	Events               []*CClanEventUserNewsTuple `protobuf:"bytes,4,rep,name=events" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CClanMatchEventByRange) Reset()         { *m = CClanMatchEventByRange{} }
func (m *CClanMatchEventByRange) String() string { return proto.CompactTextString(m) }
func (*CClanMatchEventByRange) ProtoMessage()    {}
func (*CClanMatchEventByRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{11}
}

func (m *CClanMatchEventByRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CClanMatchEventByRange.Unmarshal(m, b)
}
func (m *CClanMatchEventByRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CClanMatchEventByRange.Marshal(b, m, deterministic)
}
func (m *CClanMatchEventByRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CClanMatchEventByRange.Merge(m, src)
}
func (m *CClanMatchEventByRange) XXX_Size() int {
	return xxx_messageInfo_CClanMatchEventByRange.Size(m)
}
func (m *CClanMatchEventByRange) XXX_DiscardUnknown() {
	xxx_messageInfo_CClanMatchEventByRange.DiscardUnknown(m)
}

var xxx_messageInfo_CClanMatchEventByRange proto.InternalMessageInfo

func (m *CClanMatchEventByRange) GetRtimeBefore() uint32 {
	if m != nil && m.RtimeBefore != nil {
		return *m.RtimeBefore
	}
	return 0
}

func (m *CClanMatchEventByRange) GetRtimeAfter() uint32 {
	if m != nil && m.RtimeAfter != nil {
		return *m.RtimeAfter
	}
	return 0
}

func (m *CClanMatchEventByRange) GetQualified() uint32 {
	if m != nil && m.Qualified != nil {
		return *m.Qualified
	}
	return 0
}

func (m *CClanMatchEventByRange) GetEvents() []*CClanEventUserNewsTuple {
	if m != nil {
		return m.Events
	}
	return nil
}

type CCommunity_ClanAnnouncementInfo struct {
	Gid                  *uint64  `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	Clanid               *uint64  `protobuf:"varint,2,opt,name=clanid" json:"clanid,omitempty"`
	Posterid             *uint64  `protobuf:"varint,3,opt,name=posterid" json:"posterid,omitempty"`
	Headline             *string  `protobuf:"bytes,4,opt,name=headline" json:"headline,omitempty"`
	Posttime             *uint32  `protobuf:"varint,5,opt,name=posttime" json:"posttime,omitempty"`
	Updatetime           *uint32  `protobuf:"varint,6,opt,name=updatetime" json:"updatetime,omitempty"`
	Body                 *string  `protobuf:"bytes,7,opt,name=body" json:"body,omitempty"`
	Commentcount         *int32   `protobuf:"varint,8,opt,name=commentcount" json:"commentcount,omitempty"`
	Tags                 []string `protobuf:"bytes,9,rep,name=tags" json:"tags,omitempty"`
	Language             *int32   `protobuf:"varint,10,opt,name=language" json:"language,omitempty"`
	Hidden               *bool    `protobuf:"varint,11,opt,name=hidden" json:"hidden,omitempty"`
	ForumTopicId         *uint64  `protobuf:"fixed64,12,opt,name=forum_topic_id,json=forumTopicId" json:"forum_topic_id,omitempty"`
	EventGid             *uint64  `protobuf:"fixed64,13,opt,name=event_gid,json=eventGid" json:"event_gid,omitempty"`
	Voteupcount          *int32   `protobuf:"varint,14,opt,name=voteupcount" json:"voteupcount,omitempty"`
	Votedowncount        *int32   `protobuf:"varint,15,opt,name=votedowncount" json:"votedowncount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCommunity_ClanAnnouncementInfo) Reset()         { *m = CCommunity_ClanAnnouncementInfo{} }
func (m *CCommunity_ClanAnnouncementInfo) String() string { return proto.CompactTextString(m) }
func (*CCommunity_ClanAnnouncementInfo) ProtoMessage()    {}
func (*CCommunity_ClanAnnouncementInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{12}
}

func (m *CCommunity_ClanAnnouncementInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCommunity_ClanAnnouncementInfo.Unmarshal(m, b)
}
func (m *CCommunity_ClanAnnouncementInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCommunity_ClanAnnouncementInfo.Marshal(b, m, deterministic)
}
func (m *CCommunity_ClanAnnouncementInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCommunity_ClanAnnouncementInfo.Merge(m, src)
}
func (m *CCommunity_ClanAnnouncementInfo) XXX_Size() int {
	return xxx_messageInfo_CCommunity_ClanAnnouncementInfo.Size(m)
}
func (m *CCommunity_ClanAnnouncementInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CCommunity_ClanAnnouncementInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CCommunity_ClanAnnouncementInfo proto.InternalMessageInfo

func (m *CCommunity_ClanAnnouncementInfo) GetGid() uint64 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *CCommunity_ClanAnnouncementInfo) GetClanid() uint64 {
	if m != nil && m.Clanid != nil {
		return *m.Clanid
	}
	return 0
}

func (m *CCommunity_ClanAnnouncementInfo) GetPosterid() uint64 {
	if m != nil && m.Posterid != nil {
		return *m.Posterid
	}
	return 0
}

func (m *CCommunity_ClanAnnouncementInfo) GetHeadline() string {
	if m != nil && m.Headline != nil {
		return *m.Headline
	}
	return ""
}

func (m *CCommunity_ClanAnnouncementInfo) GetPosttime() uint32 {
	if m != nil && m.Posttime != nil {
		return *m.Posttime
	}
	return 0
}

func (m *CCommunity_ClanAnnouncementInfo) GetUpdatetime() uint32 {
	if m != nil && m.Updatetime != nil {
		return *m.Updatetime
	}
	return 0
}

func (m *CCommunity_ClanAnnouncementInfo) GetBody() string {
	if m != nil && m.Body != nil {
		return *m.Body
	}
	return ""
}

func (m *CCommunity_ClanAnnouncementInfo) GetCommentcount() int32 {
	if m != nil && m.Commentcount != nil {
		return *m.Commentcount
	}
	return 0
}

func (m *CCommunity_ClanAnnouncementInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CCommunity_ClanAnnouncementInfo) GetLanguage() int32 {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return 0
}

func (m *CCommunity_ClanAnnouncementInfo) GetHidden() bool {
	if m != nil && m.Hidden != nil {
		return *m.Hidden
	}
	return false
}

func (m *CCommunity_ClanAnnouncementInfo) GetForumTopicId() uint64 {
	if m != nil && m.ForumTopicId != nil {
		return *m.ForumTopicId
	}
	return 0
}

func (m *CCommunity_ClanAnnouncementInfo) GetEventGid() uint64 {
	if m != nil && m.EventGid != nil {
		return *m.EventGid
	}
	return 0
}

func (m *CCommunity_ClanAnnouncementInfo) GetVoteupcount() int32 {
	if m != nil && m.Voteupcount != nil {
		return *m.Voteupcount
	}
	return 0
}

func (m *CCommunity_ClanAnnouncementInfo) GetVotedowncount() int32 {
	if m != nil && m.Votedowncount != nil {
		return *m.Votedowncount
	}
	return 0
}

type CClanEventData struct {
	Gid                    *uint64                          `protobuf:"fixed64,1,opt,name=gid" json:"gid,omitempty"`
	ClanSteamid            *uint64                          `protobuf:"fixed64,2,opt,name=clan_steamid,json=clanSteamid" json:"clan_steamid,omitempty"`
	EventName              *string                          `protobuf:"bytes,3,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	EventType              *EProtoClanEventType             `protobuf:"varint,4,opt,name=event_type,json=eventType,enum=EProtoClanEventType,def=1" json:"event_type,omitempty"`
	Appid                  *uint32                          `protobuf:"varint,5,opt,name=appid" json:"appid,omitempty"`
	ServerAddress          *string                          `protobuf:"bytes,6,opt,name=server_address,json=serverAddress" json:"server_address,omitempty"`
	ServerPassword         *string                          `protobuf:"bytes,7,opt,name=server_password,json=serverPassword" json:"server_password,omitempty"`
	Rtime32StartTime       *uint32                          `protobuf:"varint,8,opt,name=rtime32_start_time,json=rtime32StartTime" json:"rtime32_start_time,omitempty"`
	Rtime32EndTime         *uint32                          `protobuf:"varint,9,opt,name=rtime32_end_time,json=rtime32EndTime" json:"rtime32_end_time,omitempty"`
	CommentCount           *int32                           `protobuf:"varint,10,opt,name=comment_count,json=commentCount" json:"comment_count,omitempty"`
	CreatorSteamid         *uint64                          `protobuf:"fixed64,11,opt,name=creator_steamid,json=creatorSteamid" json:"creator_steamid,omitempty"`
	LastUpdateSteamid      *uint64                          `protobuf:"fixed64,12,opt,name=last_update_steamid,json=lastUpdateSteamid" json:"last_update_steamid,omitempty"`
	EventNotes             *string                          `protobuf:"bytes,13,opt,name=event_notes,json=eventNotes" json:"event_notes,omitempty"`
	Jsondata               *string                          `protobuf:"bytes,14,opt,name=jsondata" json:"jsondata,omitempty"`
	AnnouncementBody       *CCommunity_ClanAnnouncementInfo `protobuf:"bytes,15,opt,name=announcement_body,json=announcementBody" json:"announcement_body,omitempty"`
	Published              *bool                            `protobuf:"varint,16,opt,name=published" json:"published,omitempty"`
	Hidden                 *bool                            `protobuf:"varint,17,opt,name=hidden" json:"hidden,omitempty"`
	Rtime32VisibilityStart *uint32                          `protobuf:"varint,18,opt,name=rtime32_visibility_start,json=rtime32VisibilityStart" json:"rtime32_visibility_start,omitempty"`
	Rtime32VisibilityEnd   *uint32                          `protobuf:"varint,19,opt,name=rtime32_visibility_end,json=rtime32VisibilityEnd" json:"rtime32_visibility_end,omitempty"`
	BroadcasterAccountid   *uint32                          `protobuf:"varint,20,opt,name=broadcaster_accountid,json=broadcasterAccountid" json:"broadcaster_accountid,omitempty"`
	FollowerCount          *uint32                          `protobuf:"varint,21,opt,name=follower_count,json=followerCount" json:"follower_count,omitempty"`
	IgnoreCount            *uint32                          `protobuf:"varint,22,opt,name=ignore_count,json=ignoreCount" json:"ignore_count,omitempty"`
	ForumTopicId           *uint64                          `protobuf:"fixed64,23,opt,name=forum_topic_id,json=forumTopicId" json:"forum_topic_id,omitempty"`
	Rtime32LastModified    *uint32                          `protobuf:"varint,24,opt,name=rtime32_last_modified,json=rtime32LastModified" json:"rtime32_last_modified,omitempty"`
	NewsPostGid            *uint64                          `protobuf:"fixed64,25,opt,name=news_post_gid,json=newsPostGid" json:"news_post_gid,omitempty"`
	RtimeModReviewed       *uint32                          `protobuf:"varint,26,opt,name=rtime_mod_reviewed,json=rtimeModReviewed" json:"rtime_mod_reviewed,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                         `json:"-"`
	XXX_unrecognized       []byte                           `json:"-"`
	XXX_sizecache          int32                            `json:"-"`
}

func (m *CClanEventData) Reset()         { *m = CClanEventData{} }
func (m *CClanEventData) String() string { return proto.CompactTextString(m) }
func (*CClanEventData) ProtoMessage()    {}
func (*CClanEventData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{13}
}

func (m *CClanEventData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CClanEventData.Unmarshal(m, b)
}
func (m *CClanEventData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CClanEventData.Marshal(b, m, deterministic)
}
func (m *CClanEventData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CClanEventData.Merge(m, src)
}
func (m *CClanEventData) XXX_Size() int {
	return xxx_messageInfo_CClanEventData.Size(m)
}
func (m *CClanEventData) XXX_DiscardUnknown() {
	xxx_messageInfo_CClanEventData.DiscardUnknown(m)
}

var xxx_messageInfo_CClanEventData proto.InternalMessageInfo

const Default_CClanEventData_EventType EProtoClanEventType = EProtoClanEventType_k_EClanOtherEvent

func (m *CClanEventData) GetGid() uint64 {
	if m != nil && m.Gid != nil {
		return *m.Gid
	}
	return 0
}

func (m *CClanEventData) GetClanSteamid() uint64 {
	if m != nil && m.ClanSteamid != nil {
		return *m.ClanSteamid
	}
	return 0
}

func (m *CClanEventData) GetEventName() string {
	if m != nil && m.EventName != nil {
		return *m.EventName
	}
	return ""
}

func (m *CClanEventData) GetEventType() EProtoClanEventType {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return Default_CClanEventData_EventType
}

func (m *CClanEventData) GetAppid() uint32 {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return 0
}

func (m *CClanEventData) GetServerAddress() string {
	if m != nil && m.ServerAddress != nil {
		return *m.ServerAddress
	}
	return ""
}

func (m *CClanEventData) GetServerPassword() string {
	if m != nil && m.ServerPassword != nil {
		return *m.ServerPassword
	}
	return ""
}

func (m *CClanEventData) GetRtime32StartTime() uint32 {
	if m != nil && m.Rtime32StartTime != nil {
		return *m.Rtime32StartTime
	}
	return 0
}

func (m *CClanEventData) GetRtime32EndTime() uint32 {
	if m != nil && m.Rtime32EndTime != nil {
		return *m.Rtime32EndTime
	}
	return 0
}

func (m *CClanEventData) GetCommentCount() int32 {
	if m != nil && m.CommentCount != nil {
		return *m.CommentCount
	}
	return 0
}

func (m *CClanEventData) GetCreatorSteamid() uint64 {
	if m != nil && m.CreatorSteamid != nil {
		return *m.CreatorSteamid
	}
	return 0
}

func (m *CClanEventData) GetLastUpdateSteamid() uint64 {
	if m != nil && m.LastUpdateSteamid != nil {
		return *m.LastUpdateSteamid
	}
	return 0
}

func (m *CClanEventData) GetEventNotes() string {
	if m != nil && m.EventNotes != nil {
		return *m.EventNotes
	}
	return ""
}

func (m *CClanEventData) GetJsondata() string {
	if m != nil && m.Jsondata != nil {
		return *m.Jsondata
	}
	return ""
}

func (m *CClanEventData) GetAnnouncementBody() *CCommunity_ClanAnnouncementInfo {
	if m != nil {
		return m.AnnouncementBody
	}
	return nil
}

func (m *CClanEventData) GetPublished() bool {
	if m != nil && m.Published != nil {
		return *m.Published
	}
	return false
}

func (m *CClanEventData) GetHidden() bool {
	if m != nil && m.Hidden != nil {
		return *m.Hidden
	}
	return false
}

func (m *CClanEventData) GetRtime32VisibilityStart() uint32 {
	if m != nil && m.Rtime32VisibilityStart != nil {
		return *m.Rtime32VisibilityStart
	}
	return 0
}

func (m *CClanEventData) GetRtime32VisibilityEnd() uint32 {
	if m != nil && m.Rtime32VisibilityEnd != nil {
		return *m.Rtime32VisibilityEnd
	}
	return 0
}

func (m *CClanEventData) GetBroadcasterAccountid() uint32 {
	if m != nil && m.BroadcasterAccountid != nil {
		return *m.BroadcasterAccountid
	}
	return 0
}

func (m *CClanEventData) GetFollowerCount() uint32 {
	if m != nil && m.FollowerCount != nil {
		return *m.FollowerCount
	}
	return 0
}

func (m *CClanEventData) GetIgnoreCount() uint32 {
	if m != nil && m.IgnoreCount != nil {
		return *m.IgnoreCount
	}
	return 0
}

func (m *CClanEventData) GetForumTopicId() uint64 {
	if m != nil && m.ForumTopicId != nil {
		return *m.ForumTopicId
	}
	return 0
}

func (m *CClanEventData) GetRtime32LastModified() uint32 {
	if m != nil && m.Rtime32LastModified != nil {
		return *m.Rtime32LastModified
	}
	return 0
}

func (m *CClanEventData) GetNewsPostGid() uint64 {
	if m != nil && m.NewsPostGid != nil {
		return *m.NewsPostGid
	}
	return 0
}

func (m *CClanEventData) GetRtimeModReviewed() uint32 {
	if m != nil && m.RtimeModReviewed != nil {
		return *m.RtimeModReviewed
	}
	return 0
}

type CBilling_Address struct {
	FirstName            *string  `protobuf:"bytes,1,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	LastName             *string  `protobuf:"bytes,2,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	Address1             *string  `protobuf:"bytes,3,opt,name=address1" json:"address1,omitempty"`
	Address2             *string  `protobuf:"bytes,4,opt,name=address2" json:"address2,omitempty"`
	City                 *string  `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	UsState              *string  `protobuf:"bytes,6,opt,name=us_state,json=usState" json:"us_state,omitempty"`
	CountryCode          *string  `protobuf:"bytes,7,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Postcode             *string  `protobuf:"bytes,8,opt,name=postcode" json:"postcode,omitempty"`
	ZipPlus4             *int32   `protobuf:"varint,9,opt,name=zip_plus4,json=zipPlus4" json:"zip_plus4,omitempty"`
	Phone                *string  `protobuf:"bytes,10,opt,name=phone" json:"phone,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CBilling_Address) Reset()         { *m = CBilling_Address{} }
func (m *CBilling_Address) String() string { return proto.CompactTextString(m) }
func (*CBilling_Address) ProtoMessage()    {}
func (*CBilling_Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bf300d5da56aa5f, []int{14}
}

func (m *CBilling_Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CBilling_Address.Unmarshal(m, b)
}
func (m *CBilling_Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CBilling_Address.Marshal(b, m, deterministic)
}
func (m *CBilling_Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CBilling_Address.Merge(m, src)
}
func (m *CBilling_Address) XXX_Size() int {
	return xxx_messageInfo_CBilling_Address.Size(m)
}
func (m *CBilling_Address) XXX_DiscardUnknown() {
	xxx_messageInfo_CBilling_Address.DiscardUnknown(m)
}

var xxx_messageInfo_CBilling_Address proto.InternalMessageInfo

func (m *CBilling_Address) GetFirstName() string {
	if m != nil && m.FirstName != nil {
		return *m.FirstName
	}
	return ""
}

func (m *CBilling_Address) GetLastName() string {
	if m != nil && m.LastName != nil {
		return *m.LastName
	}
	return ""
}

func (m *CBilling_Address) GetAddress1() string {
	if m != nil && m.Address1 != nil {
		return *m.Address1
	}
	return ""
}

func (m *CBilling_Address) GetAddress2() string {
	if m != nil && m.Address2 != nil {
		return *m.Address2
	}
	return ""
}

func (m *CBilling_Address) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *CBilling_Address) GetUsState() string {
	if m != nil && m.UsState != nil {
		return *m.UsState
	}
	return ""
}

func (m *CBilling_Address) GetCountryCode() string {
	if m != nil && m.CountryCode != nil {
		return *m.CountryCode
	}
	return ""
}

func (m *CBilling_Address) GetPostcode() string {
	if m != nil && m.Postcode != nil {
		return *m.Postcode
	}
	return ""
}

func (m *CBilling_Address) GetZipPlus4() int32 {
	if m != nil && m.ZipPlus4 != nil {
		return *m.ZipPlus4
	}
	return 0
}

func (m *CBilling_Address) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

var E_MsgpoolSoftLimit = &proto.ExtensionDesc{
	ExtendedType:  (*protobuf.MessageOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         50000,
	Name:          "msgpool_soft_limit",
	Tag:           "varint,50000,opt,name=msgpool_soft_limit,def=32",
	Filename:      "steammessages_base.proto",
}

var E_MsgpoolHardLimit = &proto.ExtensionDesc{
	ExtendedType:  (*protobuf.MessageOptions)(nil),
	ExtensionType: (*int32)(nil),
	Field:         50001,
	Name:          "msgpool_hard_limit",
	Tag:           "varint,50001,opt,name=msgpool_hard_limit,def=384",
	Filename:      "steammessages_base.proto",
}

var E_ForcePhpGeneration = &proto.ExtensionDesc{
	ExtendedType:  (*protobuf.FileOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50000,
	Name:          "force_php_generation",
	Tag:           "varint,50000,opt,name=force_php_generation,def=0",
	Filename:      "steammessages_base.proto",
}

var E_PhpOutputAlwaysNumber = &proto.ExtensionDesc{
	ExtendedType:  (*protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50020,
	Name:          "php_output_always_number",
	Tag:           "varint,50020,opt,name=php_output_always_number,def=0",
	Filename:      "steammessages_base.proto",
}

func init() {
	proto.RegisterEnum("EProtoClanEventType", EProtoClanEventType_name, EProtoClanEventType_value)
	proto.RegisterEnum("PartnerEventNotificationType", PartnerEventNotificationType_name, PartnerEventNotificationType_value)
	proto.RegisterType((*CMsgIPAddress)(nil), "CMsgIPAddress")
	proto.RegisterType((*CMsgIPAddressBucket)(nil), "CMsgIPAddressBucket")
	proto.RegisterType((*CMsgProtoBufHeader)(nil), "CMsgProtoBufHeader")
	proto.RegisterType((*CMsgMulti)(nil), "CMsgMulti")
	proto.RegisterType((*CMsgProtobufWrapped)(nil), "CMsgProtobufWrapped")
	proto.RegisterType((*CMsgAuthTicket)(nil), "CMsgAuthTicket")
	proto.RegisterType((*CCDDBAppDetailCommon)(nil), "CCDDBAppDetailCommon")
	proto.RegisterType((*CMsgAppRights)(nil), "CMsgAppRights")
	proto.RegisterType((*CCuratorPreferences)(nil), "CCuratorPreferences")
	proto.RegisterType((*CLocalizationToken)(nil), "CLocalizationToken")
	proto.RegisterType((*CClanEventUserNewsTuple)(nil), "CClanEventUserNewsTuple")
	proto.RegisterType((*CClanMatchEventByRange)(nil), "CClanMatchEventByRange")
	proto.RegisterType((*CCommunity_ClanAnnouncementInfo)(nil), "CCommunity_ClanAnnouncementInfo")
	proto.RegisterType((*CClanEventData)(nil), "CClanEventData")
	proto.RegisterType((*CBilling_Address)(nil), "CBilling_Address")
	proto.RegisterExtension(E_MsgpoolSoftLimit)
	proto.RegisterExtension(E_MsgpoolHardLimit)
	proto.RegisterExtension(E_ForcePhpGeneration)
	proto.RegisterExtension(E_PhpOutputAlwaysNumber)
}

func init() { proto.RegisterFile("steammessages_base.proto", fileDescriptor_8bf300d5da56aa5f) }

var fileDescriptor_8bf300d5da56aa5f = []byte{
	// 3258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x59, 0xcd, 0x72, 0x1c, 0xb7,
	0x76, 0xbe, 0xc3, 0xdf, 0x19, 0x70, 0x66, 0x38, 0x04, 0xff, 0x5a, 0x94, 0x64, 0x8d, 0xc7, 0xbe,
	0x36, 0xe3, 0xa4, 0x68, 0x8b, 0xa2, 0x65, 0x5f, 0x55, 0x2a, 0x55, 0xe4, 0x88, 0x94, 0x95, 0x90,
	0x32, 0xab, 0x87, 0xb6, 0x53, 0x95, 0x05, 0x0a, 0xec, 0xc6, 0xcc, 0xc0, 0xea, 0x6e, 0xb4, 0x01,
	0x34, 0xa9, 0xd1, 0xea, 0x66, 0x93, 0x57, 0xc9, 0x26, 0xdb, 0x3c, 0x42, 0x36, 0xa9, 0x4a, 0xd5,
	0xcd, 0x3b, 0x24, 0xd9, 0x64, 0x93, 0x27, 0x48, 0xa5, 0xce, 0x01, 0xba, 0xd9, 0x23, 0xc9, 0xe5,
	0xac, 0x38, 0xf8, 0xbe, 0x03, 0xe0, 0xe0, 0xfc, 0x02, 0x4d, 0x12, 0x18, 0x2b, 0x78, 0x9a, 0x0a,
	0x63, 0xf8, 0x44, 0x18, 0x76, 0xcd, 0x8d, 0x38, 0xc8, 0xb5, 0xb2, 0x6a, 0xaf, 0x3f, 0x51, 0x6a,
	0x92, 0x88, 0x2f, 0x71, 0x74, 0x5d, 0x8c, 0xbf, 0x8c, 0x85, 0x89, 0xb4, 0xcc, 0xad, 0xd2, 0x4e,
	0x62, 0xf0, 0x07, 0xd2, 0x19, 0x5e, 0x98, 0xc9, 0xcb, 0xcb, 0xe3, 0x38, 0xd6, 0xc2, 0x18, 0xda,
	0x23, 0x0b, 0x37, 0x47, 0x41, 0xa3, 0xdf, 0xd8, 0x5f, 0xfd, 0xee, 0x77, 0xe1, 0xc2, 0xcd, 0x11,
	0x22, 0x4f, 0x83, 0x85, 0x7e, 0x63, 0xbf, 0x8d, 0xc8, 0xd3, 0x93, 0x25, 0xb2, 0x20, 0xf3, 0x41,
	0x4a, 0x36, 0xe7, 0xa6, 0x9e, 0x14, 0xd1, 0x6b, 0x61, 0xe9, 0x5f, 0x91, 0x4d, 0xa5, 0xe5, 0x44,
	0x66, 0x3c, 0x61, 0x32, 0x67, 0xdc, 0x91, 0xb8, 0xe2, 0xda, 0x61, 0xf7, 0x60, 0x6e, 0x4a, 0xb8,
	0x51, 0x8a, 0xbe, 0xcc, 0x4b, 0x05, 0x76, 0xc8, 0xca, 0x35, 0xae, 0x84, 0x5b, 0xae, 0x84, 0x7e,
	0x34, 0xf8, 0xcf, 0x55, 0x42, 0x61, 0xf2, 0x25, 0xe8, 0x7d, 0x52, 0x8c, 0xbf, 0x13, 0x3c, 0x16,
	0x9a, 0x06, 0x64, 0x15, 0x8f, 0x2f, 0x63, 0xdc, 0x62, 0x25, 0x2c, 0x87, 0xf4, 0xcf, 0x48, 0x2f,
	0x4a, 0xa4, 0xc8, 0x2c, 0x33, 0xc2, 0x18, 0xa9, 0x32, 0x19, 0xe3, 0x92, 0xcb, 0xe1, 0xba, 0xc3,
	0x47, 0x25, 0x4c, 0x3f, 0x21, 0x1d, 0xad, 0x0a, 0x2b, 0xb3, 0x09, 0xe3, 0x79, 0x2e, 0xe3, 0x60,
	0xb1, 0xdf, 0xd8, 0xef, 0x84, 0x6d, 0x0f, 0x1e, 0x03, 0x46, 0xbf, 0x21, 0xed, 0x9f, 0xd5, 0xb5,
	0x8c, 0x99, 0x51, 0x85, 0x8e, 0x44, 0x40, 0x60, 0xbb, 0x67, 0x5b, 0x8f, 0xbf, 0x3d, 0x3a, 0x7a,
	0xfa, 0xcd, 0xd1, 0xd1, 0x57, 0xdf, 0x3c, 0xf9, 0xe6, 0xab, 0x3f, 0x7c, 0xfd, 0xf5, 0xe3, 0xa7,
	0x8f, 0xbf, 0x0e, 0xd7, 0x50, 0x72, 0x84, 0x82, 0x77, 0x13, 0x2d, 0xd7, 0x13, 0x61, 0x83, 0xb5,
	0xdf, 0x9c, 0x78, 0x85, 0x82, 0xf4, 0x33, 0xb2, 0xee, 0xa6, 0xb0, 0x9f, 0xd5, 0x35, 0xcb, 0x78,
	0x2a, 0x82, 0x76, 0xbf, 0xb1, 0xdf, 0x0a, 0x3b, 0x0e, 0xfe, 0x6b, 0x75, 0xfd, 0x8a, 0xa7, 0x82,
	0xee, 0x92, 0x55, 0x23, 0x7e, 0x61, 0x59, 0x91, 0x06, 0x01, 0x1e, 0x70, 0xc5, 0x88, 0x5f, 0x5e,
	0x15, 0x29, 0xbd, 0x4f, 0x56, 0x85, 0x16, 0xa6, 0x48, 0x6c, 0xd0, 0x01, 0xe2, 0x59, 0xe3, 0x30,
	0x2c, 0x11, 0x38, 0xb4, 0xd0, 0x5a, 0x69, 0xe6, 0x23, 0x27, 0xe8, 0xe2, 0xda, 0x6d, 0x04, 0x2f,
	0x1c, 0x46, 0xff, 0x82, 0x50, 0x5e, 0xd8, 0x29, 0xe3, 0x51, 0xa4, 0x8a, 0xcc, 0xb2, 0x71, 0xc2,
	0x27, 0x26, 0xe8, 0xa1, 0x79, 0x7a, 0xc0, 0x1c, 0x3b, 0xe2, 0x0c, 0x70, 0xfa, 0x31, 0x69, 0x5b,
	0xf5, 0x5a, 0x64, 0xa5, 0x89, 0x76, 0x50, 0x6e, 0x0d, 0x31, 0x6f, 0x8c, 0x03, 0xb2, 0xc9, 0xe3,
	0x54, 0x66, 0xcc, 0xe4, 0x4a, 0x8d, 0xc1, 0xe2, 0x85, 0x11, 0x3a, 0xd8, 0xed, 0x37, 0xf6, 0x9b,
	0xe1, 0x06, 0x52, 0x23, 0xcf, 0xfc, 0x60, 0x84, 0xa6, 0x5f, 0x90, 0x75, 0xab, 0x79, 0x66, 0x72,
	0xa5, 0x2d, 0x43, 0xd5, 0x82, 0x0d, 0x77, 0x94, 0xc7, 0x61, 0xb7, 0x62, 0x4e, 0x81, 0xa0, 0x87,
	0xa4, 0xe5, 0xcf, 0x22, 0xe3, 0x80, 0xf6, 0x1b, 0xfb, 0x4b, 0xbf, 0x62, 0xe5, 0x3b, 0x31, 0x38,
	0x60, 0x5e, 0x5c, 0x27, 0xd2, 0x4c, 0x85, 0x66, 0x13, 0xad, 0x8a, 0x9c, 0xc9, 0x38, 0xd8, 0x74,
	0x07, 0xac, 0x98, 0x17, 0x40, 0xbc, 0x8c, 0xe9, 0x16, 0x59, 0x36, 0x33, 0x23, 0xe3, 0x60, 0x0b,
	0x05, 0xdc, 0x80, 0xde, 0x27, 0x2d, 0xab, 0x79, 0x24, 0x98, 0xe5, 0x93, 0x60, 0x1b, 0xf6, 0x0d,
	0x9b, 0x08, 0x5c, 0xf1, 0x09, 0x1d, 0x90, 0xce, 0xad, 0xb8, 0xe6, 0xb9, 0x64, 0xaf, 0xc5, 0x0c,
	0xd6, 0xbe, 0xe7, 0x8c, 0xe2, 0xc0, 0xbf, 0x11, 0xb3, 0x97, 0x31, 0xfd, 0x9a, 0xec, 0x4a, 0xc3,
	0xc6, 0x5a, 0xa5, 0x4c, 0xbc, 0xb1, 0x42, 0x43, 0xee, 0x78, 0x13, 0xee, 0xa1, 0x61, 0xb6, 0xa4,
	0x39, 0xd3, 0x2a, 0x3d, 0xf5, 0xa4, 0xb7, 0xe5, 0x3e, 0xe9, 0x8d, 0x95, 0xbe, 0xe5, 0x3a, 0x66,
	0x56, 0x31, 0xa7, 0xd8, 0xfd, 0xfe, 0xe2, 0x7e, 0x27, 0xec, 0x7a, 0xfc, 0x4a, 0x8d, 0x50, 0xc3,
	0x7b, 0xa4, 0x19, 0xa5, 0x5e, 0xe2, 0x01, 0xee, 0xbf, 0x1a, 0xa5, 0x15, 0x75, 0x3b, 0x61, 0xe8,
	0xa2, 0xe0, 0x23, 0x8c, 0x80, 0xd5, 0xdb, 0xc9, 0x15, 0x0c, 0xe9, 0x67, 0xa4, 0x93, 0xf0, 0x22,
	0x8b, 0xc0, 0x34, 0x76, 0x96, 0x8b, 0xe0, 0x11, 0x4c, 0x7d, 0xd6, 0xf8, 0x2a, 0x6c, 0x97, 0xf8,
	0xd5, 0x2c, 0x87, 0xf8, 0x5b, 0xd6, 0x82, 0x27, 0x69, 0xd0, 0x2f, 0x79, 0x37, 0x86, 0xd2, 0x21,
	0xf3, 0x60, 0x1d, 0x50, 0x28, 0x1d, 0x32, 0xa7, 0xdb, 0x64, 0x59, 0xe6, 0xec, 0xe6, 0x69, 0xf0,
	0xd0, 0xd7, 0x93, 0x25, 0x99, 0xff, 0xf8, 0xf4, 0xa4, 0x45, 0x56, 0x7d, 0xad, 0x18, 0x8c, 0x48,
	0x0b, 0xd2, 0xfc, 0xa2, 0x48, 0xac, 0x84, 0x18, 0x35, 0xf2, 0xad, 0x60, 0x45, 0xf6, 0x56, 0xe6,
	0xb9, 0x70, 0x39, 0xde, 0x09, 0xdb, 0x00, 0xfe, 0xe0, 0x31, 0x88, 0x3a, 0xef, 0x4f, 0x76, 0xad,
	0xe2, 0x99, 0x2b, 0x55, 0xe1, 0x9a, 0xc7, 0x4e, 0x54, 0x3c, 0x1b, 0x7c, 0xeb, 0x6a, 0xd5, 0xa5,
	0xaf, 0x83, 0x3f, 0x69, 0xfe, 0xc1, 0x99, 0x8d, 0xf7, 0x67, 0xfe, 0xa9, 0x41, 0xba, 0x30, 0xf5,
	0xb8, 0xb0, 0xd3, 0x2b, 0x89, 0x15, 0x6e, 0x87, 0xac, 0x08, 0x63, 0xb9, 0x15, 0x5e, 0x1b, 0x3f,
	0xaa, 0x67, 0xdb, 0x82, 0x33, 0x44, 0x2d, 0xdb, 0x6a, 0x75, 0x6a, 0x71, 0xbe, 0x4e, 0xed, 0x90,
	0x95, 0x09, 0x4f, 0x21, 0x64, 0x97, 0x5c, 0xc1, 0x73, 0x23, 0xda, 0x27, 0xed, 0x29, 0x43, 0x21,
	0x96, 0xcb, 0x5c, 0x04, 0xcb, 0xb8, 0x19, 0x99, 0x8e, 0x00, 0xba, 0x94, 0xb9, 0xa0, 0x0f, 0x09,
	0xb1, 0xa8, 0x12, 0x8b, 0x74, 0x14, 0xac, 0x20, 0xdf, 0x72, 0xc8, 0x50, 0x47, 0xb0, 0xb0, 0x1b,
	0x04, 0xab, 0x78, 0x2e, 0x3f, 0x1a, 0xfc, 0xcf, 0x02, 0xd9, 0x1a, 0x0e, 0x9f, 0x3f, 0x3f, 0x39,
	0xce, 0xf3, 0xe7, 0xc2, 0x72, 0x99, 0x0c, 0x55, 0x9a, 0xaa, 0x0c, 0xa2, 0xdb, 0x95, 0x3f, 0x77,
	0x2e, 0x37, 0xa0, 0x94, 0x2c, 0x61, 0xe9, 0x59, 0xc0, 0xe0, 0xc0, 0xdf, 0x80, 0xc9, 0x48, 0x65,
	0x78, 0x94, 0x56, 0x88, 0xbf, 0x01, 0x4b, 0xd4, 0x44, 0xe1, 0x29, 0x5a, 0x21, 0xfe, 0x06, 0x0d,
	0xe1, 0x2f, 0x33, 0x29, 0x4f, 0x12, 0x3c, 0x41, 0x2b, 0x6c, 0x01, 0x32, 0x02, 0x00, 0xa6, 0x58,
	0xa5, 0x12, 0x54, 0xbd, 0x19, 0xe2, 0x6f, 0xc0, 0x62, 0x91, 0x2a, 0xd4, 0xb9, 0x19, 0xe2, 0x6f,
	0x50, 0x2c, 0x15, 0xb1, 0xe4, 0x41, 0x13, 0x41, 0x37, 0xa0, 0x4f, 0xc9, 0x6e, 0xa4, 0xd2, 0xb4,
	0xc8, 0xa4, 0x9d, 0xb1, 0x1b, 0x69, 0xe4, 0x75, 0x22, 0x18, 0xb8, 0xc2, 0x04, 0x2d, 0x94, 0xdb,
	0xae, 0xe8, 0x1f, 0x1d, 0x3b, 0x02, 0x12, 0x82, 0x6a, 0xac, 0xa5, 0xc8, 0xe2, 0x64, 0xe6, 0x8a,
	0x2a, 0x71, 0x85, 0xaf, 0x04, 0xb1, 0xa6, 0xf6, 0xc9, 0x5a, 0xae, 0x55, 0xce, 0x27, 0xdc, 0x4a,
	0x95, 0x61, 0xcd, 0x6e, 0x85, 0x75, 0x88, 0x7e, 0x41, 0x36, 0xa6, 0xdc, 0x30, 0x1e, 0x17, 0x89,
	0x65, 0x91, 0xca, 0xac, 0xc8, 0x2c, 0xd6, 0xe7, 0x66, 0xb8, 0x3e, 0xe5, 0xe6, 0x18, 0xf0, 0xa1,
	0x83, 0x07, 0xff, 0xbb, 0xe4, 0xfa, 0xec, 0x71, 0x9e, 0x87, 0x72, 0x32, 0xb5, 0x06, 0x6a, 0x86,
	0x88, 0xa5, 0x65, 0x32, 0x1b, 0x2b, 0xb4, 0x77, 0x33, 0x6c, 0x02, 0xf0, 0x32, 0x1b, 0x2b, 0x08,
	0x16, 0x5f, 0x7a, 0xd0, 0xea, 0xcd, 0xb0, 0x1c, 0x42, 0x4b, 0xb8, 0x91, 0xe2, 0xd6, 0x55, 0x42,
	0x16, 0x73, 0xcb, 0xd1, 0x07, 0xcd, 0xb0, 0x03, 0x30, 0x96, 0xc1, 0xe7, 0xdc, 0x72, 0xba, 0x47,
	0x9a, 0xb1, 0xba, 0xcd, 0x12, 0xc5, 0x5d, 0x58, 0x35, 0xc3, 0x6a, 0x0c, 0xe7, 0x2f, 0x72, 0xf8,
	0xc5, 0xa2, 0xf8, 0xb5, 0x98, 0x19, 0xf4, 0x4b, 0x33, 0x6c, 0x3b, 0x70, 0x88, 0x18, 0xfd, 0x9c,
	0xac, 0x4f, 0x44, 0x26, 0x34, 0xb7, 0xa2, 0x14, 0x73, 0x5e, 0xea, 0x96, 0xf0, 0x9d, 0x20, 0x6a,
	0x34, 0x96, 0x19, 0xcf, 0x22, 0xc9, 0x13, 0xe3, 0x5d, 0xd7, 0x05, 0xf8, 0xac, 0x42, 0x21, 0x16,
	0x52, 0x9e, 0x41, 0xae, 0x45, 0x62, 0xe2, 0x3d, 0xd9, 0x72, 0xc8, 0x50, 0x4c, 0xe8, 0xef, 0x49,
	0xd7, 0xd3, 0x46, 0x4e, 0x32, 0x99, 0x4d, 0xbc, 0x13, 0x3b, 0x0e, 0x1d, 0x39, 0x10, 0x94, 0x2f,
	0x57, 0x71, 0x5a, 0x11, 0xa7, 0xbc, 0x5f, 0xc8, 0xe9, 0xf4, 0x7b, 0xd2, 0x45, 0xe3, 0xa6, 0x5c,
	0xbf, 0x16, 0xd0, 0xc1, 0xd1, 0x7f, 0xcd, 0xb0, 0x03, 0xe8, 0x45, 0x09, 0x82, 0xea, 0x22, 0x52,
	0x99, 0x4a, 0x67, 0xcc, 0x14, 0x39, 0xf4, 0x11, 0xef, 0xbf, 0xae, 0x87, 0x47, 0x0e, 0xa5, 0x7f,
	0x49, 0xf6, 0xde, 0x11, 0x84, 0xbf, 0x42, 0xdf, 0x48, 0xa3, 0x34, 0xb6, 0xd6, 0x66, 0x18, 0xcc,
	0xcf, 0x19, 0x55, 0x7c, 0xed, 0x64, 0xb9, 0x96, 0x11, 0x68, 0xd3, 0xad, 0x9f, 0xec, 0xd2, 0x81,
	0x20, 0x76, 0xad, 0x15, 0x8f, 0x23, 0x6e, 0x2c, 0x4b, 0xe4, 0x8d, 0xc0, 0xc2, 0xd9, 0x0c, 0x3b,
	0x15, 0x7a, 0x2e, 0x6f, 0x04, 0x3d, 0x22, 0x3b, 0x68, 0xef, 0xea, 0x6c, 0xcc, 0x6a, 0x3e, 0x1e,
	0xcb, 0x08, 0xbb, 0x72, 0x33, 0xdc, 0x02, 0xb6, 0x3a, 0xe3, 0x95, 0xe3, 0x06, 0xff, 0xb6, 0x44,
	0x36, 0x87, 0xc3, 0x42, 0x73, 0xab, 0xf4, 0xa5, 0x16, 0x63, 0xa1, 0x45, 0x16, 0x09, 0x43, 0xbf,
	0x24, 0x9b, 0xfe, 0x44, 0x22, 0x66, 0x09, 0xcf, 0x26, 0x05, 0xdc, 0x21, 0x7d, 0x01, 0xa0, 0x15,
	0x75, 0x5e, 0x32, 0x70, 0xab, 0xca, 0x13, 0x6e, 0xc7, 0x4a, 0xa7, 0xec, 0x56, 0x66, 0xb1, 0xba,
	0x35, 0x3e, 0x46, 0xd7, 0x4b, 0xfc, 0x27, 0x07, 0x43, 0x75, 0xad, 0x44, 0x53, 0x1e, 0xf9, 0x40,
	0x5d, 0x2b, 0xb1, 0x0b, 0x1e, 0xc1, 0x99, 0x2b, 0x91, 0x44, 0x66, 0xc5, 0x1b, 0x1f, 0xac, 0x9d,
	0x12, 0x3d, 0x07, 0x10, 0x42, 0xe7, 0x46, 0x57, 0x39, 0xe6, 0xc2, 0xb5, 0x75, 0xa3, 0x7d, 0x76,
	0x81, 0x49, 0xe6, 0xb2, 0x90, 0xdd, 0x48, 0x95, 0xc0, 0xf9, 0x7c, 0xc8, 0x6e, 0xf1, 0x5a, 0x2e,
	0xfe, 0xe8, 0x39, 0xc8, 0xdf, 0xf9, 0x59, 0x46, 0xbc, 0xf1, 0xa1, 0xbb, 0x5e, 0x9f, 0x30, 0x12,
	0x6f, 0xe8, 0x9f, 0x93, 0x0d, 0x2b, 0x53, 0xa8, 0xf3, 0x69, 0xce, 0x8a, 0x3c, 0xe6, 0x56, 0xc4,
	0x18, 0xc2, 0x9d, 0xb0, 0x57, 0x11, 0x3f, 0x38, 0x1c, 0x0e, 0x65, 0xf9, 0x44, 0xc6, 0x86, 0x45,
	0x60, 0x70, 0x11, 0x07, 0x2d, 0x6c, 0xca, 0x1d, 0x87, 0x0e, 0x1d, 0x08, 0xd1, 0xe7, 0xc5, 0xc6,
	0x32, 0xb1, 0x42, 0x8b, 0x38, 0x20, 0xae, 0x79, 0x3b, 0xf8, 0xcc, 0xa3, 0x10, 0xf2, 0xb7, 0xe2,
	0xda, 0x48, 0x2b, 0x98, 0x95, 0x36, 0x11, 0xbe, 0x18, 0xb5, 0x3d, 0x78, 0x05, 0x18, 0x7d, 0x44,
	0xd6, 0x4a, 0xa1, 0x42, 0x27, 0xfe, 0x9e, 0x48, 0x3c, 0xf4, 0x83, 0x4e, 0x40, 0xab, 0x58, 0x9a,
	0xa8, 0xc0, 0x3b, 0x2f, 0xca, 0x74, 0xdc, 0x5d, 0xf2, 0x0e, 0xf5, 0x62, 0x66, 0xaa, 0x6e, 0x59,
	0x15, 0x74, 0x65, 0xb0, 0x02, 0x7a, 0x52, 0x82, 0x83, 0xbf, 0x23, 0x74, 0x78, 0xae, 0x22, 0x9e,
	0xc8, 0xb7, 0x58, 0x0d, 0xdd, 0x85, 0x61, 0x8f, 0x34, 0xcb, 0x18, 0xf2, 0x21, 0x54, 0x8d, 0x21,
	0x70, 0x12, 0x37, 0x41, 0xc4, 0xcc, 0x58, 0x0d, 0x79, 0xe0, 0x5a, 0xca, 0x7a, 0x85, 0x8f, 0x10,
	0x1e, 0xfc, 0xd7, 0x02, 0xd9, 0x1d, 0x0e, 0x13, 0x9e, 0x9d, 0xde, 0x88, 0xcc, 0xc2, 0x35, 0xf0,
	0x95, 0xb8, 0x35, 0x57, 0x45, 0x9e, 0x08, 0x68, 0x6a, 0x51, 0xc2, 0xb3, 0xaa, 0x49, 0xf9, 0x11,
	0xd6, 0x53, 0x90, 0x66, 0x13, 0x7f, 0xcd, 0x5f, 0x09, 0x9b, 0x08, 0xbc, 0x70, 0x4f, 0x01, 0x9e,
	0x65, 0xaa, 0xc8, 0x22, 0x91, 0x96, 0x32, 0xae, 0x0b, 0xaf, 0xd7, 0x71, 0x10, 0x7d, 0x44, 0xd6,
	0x34, 0x78, 0x14, 0x1a, 0x89, 0xb6, 0x18, 0x8e, 0x9d, 0x90, 0x20, 0x34, 0x02, 0x04, 0x36, 0x72,
	0x02, 0x22, 0x8b, 0x7d, 0x4f, 0x6e, 0x22, 0x70, 0x9a, 0xa1, 0xeb, 0x73, 0x2d, 0x95, 0x86, 0x8e,
	0x64, 0x22, 0xa5, 0x85, 0xef, 0xca, 0x9d, 0x12, 0x1d, 0x01, 0x88, 0x7d, 0x0f, 0xee, 0x53, 0xab,
	0x48, 0xe2, 0x6f, 0xb8, 0xcc, 0x45, 0x09, 0x84, 0x97, 0xe6, 0x19, 0x14, 0xc1, 0x44, 0x59, 0x1f,
	0x61, 0x5d, 0xc4, 0x43, 0x80, 0x47, 0x89, 0xb2, 0x77, 0x6d, 0xba, 0x55, 0x6f, 0xd3, 0x87, 0x64,
	0x1b, 0xd5, 0x78, 0x72, 0xc8, 0x12, 0xa8, 0x20, 0xa9, 0x8a, 0xe5, 0x58, 0x62, 0x50, 0x81, 0xd4,
	0xa6, 0x27, 0xcf, 0xb9, 0xb1, 0x17, 0x9e, 0x1a, 0xfc, 0x53, 0x83, 0xec, 0xa0, 0xa1, 0x2f, 0xb8,
	0x8d, 0xa6, 0x68, 0xed, 0x93, 0x19, 0x6e, 0x04, 0xc9, 0xeb, 0x8e, 0x79, 0x2d, 0xc6, 0x70, 0x0e,
	0x67, 0x6d, 0x67, 0x9b, 0x13, 0x84, 0xee, 0x4c, 0xc5, 0xc7, 0x56, 0x68, 0x77, 0xe7, 0xf1, 0xa6,
	0x3a, 0x06, 0x84, 0x3e, 0x20, 0xad, 0x5f, 0x0a, 0x9e, 0x38, 0x35, 0xdc, 0x93, 0xea, 0x0e, 0xa0,
	0x5f, 0x91, 0x15, 0x74, 0x90, 0x09, 0x96, 0xfa, 0x8b, 0xfb, 0x6b, 0x87, 0xc1, 0xc1, 0xaf, 0xf8,
	0x3c, 0xf4, 0x72, 0x83, 0x7f, 0x5d, 0x24, 0x8f, 0x86, 0xc3, 0xaa, 0xe5, 0x83, 0xf4, 0x71, 0xcd,
	0x7d, 0xd8, 0x3a, 0x7b, 0x64, 0x71, 0xe2, 0x83, 0x63, 0x29, 0x84, 0x9f, 0xb5, 0x88, 0x59, 0x40,
	0xb0, 0x8c, 0x98, 0x3d, 0xd2, 0xcc, 0x95, 0xb1, 0x42, 0xfb, 0x60, 0x58, 0x0a, 0xab, 0x31, 0x70,
	0x53, 0xc1, 0xe3, 0x44, 0x66, 0xc2, 0xdf, 0x67, 0xaa, 0x71, 0x39, 0x0f, 0x8e, 0x59, 0xfa, 0xbf,
	0x1c, 0xd3, 0x8f, 0x08, 0x71, 0xd5, 0x01, 0x59, 0xe7, 0xfb, 0x1a, 0x02, 0x8e, 0xc7, 0x8b, 0xe6,
	0xaa, 0xbb, 0x23, 0xc1, 0x6f, 0x3a, 0x20, 0x6d, 0xb8, 0xa7, 0x88, 0xcc, 0xe2, 0x4b, 0x0a, 0x9d,
	0xbe, 0x1c, 0xce, 0x61, 0x18, 0x30, 0xf0, 0xf0, 0x82, 0x42, 0xd2, 0x0a, 0xf1, 0xf7, 0x5c, 0xb2,
	0x11, 0x9c, 0x73, 0x97, 0x6c, 0x3b, 0x64, 0x65, 0x2a, 0xe3, 0x58, 0x64, 0xbe, 0xf1, 0xf9, 0x11,
	0xfd, 0x94, 0xc0, 0xcb, 0xa0, 0x48, 0x99, 0x55, 0xb9, 0x8c, 0xe0, 0x35, 0xd2, 0xc6, 0x34, 0x68,
	0x23, 0x7a, 0x05, 0xe0, 0xcb, 0x77, 0x72, 0xa9, 0xf3, 0x4e, 0x2e, 0xf5, 0xc9, 0xda, 0x8d, 0xb2,
	0xa2, 0xc8, 0x9d, 0xb6, 0x5d, 0xdc, 0xb9, 0x0e, 0xd1, 0x4f, 0x49, 0x07, 0x86, 0x70, 0xdf, 0x70,
	0x32, 0xeb, 0x28, 0x33, 0x0f, 0x0e, 0xfe, 0xa5, 0x49, 0xba, 0x77, 0x0e, 0xc7, 0x4b, 0x4b, 0xcd,
	0x77, 0x2b, 0xce, 0x77, 0x1f, 0x93, 0x36, 0x78, 0x8b, 0x95, 0x57, 0x67, 0x97, 0xd8, 0x6b, 0x80,
	0x8d, 0xfc, 0xf5, 0xf9, 0x21, 0x21, 0x4e, 0x59, 0xbc, 0xca, 0xb9, 0x0b, 0xa9, 0x53, 0x1f, 0xef,
	0x71, 0x67, 0x25, 0x8d, 0x09, 0x07, 0xbe, 0xec, 0x1e, 0x6e, 0x1d, 0x9c, 0xe2, 0x4b, 0xa0, 0xda,
	0x1d, 0x5e, 0x31, 0xcf, 0x36, 0x5e, 0xb3, 0x53, 0x40, 0xbe, 0xb7, 0x53, 0xa1, 0x11, 0xf6, 0xeb,
	0xe0, 0x1b, 0xa7, 0x4a, 0xba, 0xe5, 0x7a, 0xd2, 0x41, 0xb5, 0x14, 0xfa, 0x46, 0xe8, 0xea, 0x3b,
	0xc7, 0x8a, 0x2b, 0xaa, 0x0e, 0x2d, 0xbf, 0x69, 0x7c, 0x4e, 0xd6, 0xbd, 0x58, 0xce, 0x8d, 0xb9,
	0x55, 0x3a, 0xf6, 0x11, 0xe0, 0x67, 0x5f, 0x7a, 0x14, 0x5e, 0xa3, 0x65, 0x12, 0x63, 0xfd, 0x61,
	0x18, 0x47, 0xbe, 0xd1, 0x78, 0x06, 0xcb, 0xd0, 0x15, 0x44, 0xd3, 0x3e, 0x29, 0x31, 0x28, 0x46,
	0x4e, 0xd6, 0xd5, 0x84, 0xae, 0xc7, 0x4f, 0xb3, 0x18, 0x25, 0x3f, 0x21, 0x1d, 0x1f, 0x4f, 0xcc,
	0xb9, 0x84, 0xcc, 0x05, 0xd9, 0x10, 0xfd, 0xf6, 0x39, 0x59, 0x8f, 0xb4, 0x80, 0x1b, 0x42, 0x65,
	0x6f, 0xfc, 0x54, 0x11, 0x76, 0x3d, 0x5c, 0x9a, 0xfc, 0x80, 0x6c, 0x62, 0x89, 0x71, 0x81, 0x5d,
	0x09, 0xbb, 0x50, 0xda, 0x00, 0xca, 0xb5, 0xc2, 0x52, 0xfe, 0x11, 0x59, 0xf3, 0x2e, 0x52, 0x56,
	0x18, 0xdf, 0x77, 0x9c, 0x5b, 0x5e, 0x01, 0x02, 0xa1, 0xfc, 0xb3, 0x51, 0x19, 0x5e, 0x67, 0xdd,
	0x57, 0x88, 0x6a, 0x4c, 0x2f, 0xc8, 0xc6, 0x5c, 0xed, 0xc6, 0xfc, 0x59, 0xc7, 0xaf, 0x49, 0xfd,
	0x83, 0xdf, 0xa8, 0x06, 0xe1, 0x5c, 0xd9, 0x87, 0xf7, 0x1c, 0xd4, 0xa4, 0xf2, 0x55, 0x1f, 0xfb,
	0x1b, 0xd3, 0x1d, 0x50, 0xcb, 0x9b, 0x8d, 0xb9, 0xbc, 0xf9, 0x96, 0x04, 0xa5, 0xa5, 0xf1, 0xa1,
	0x21, 0x13, 0xac, 0xf0, 0xd8, 0x22, 0x28, 0x5a, 0x7c, 0xc7, 0xf3, 0x3f, 0x56, 0xb4, 0x6b, 0x17,
	0x47, 0x64, 0xe7, 0x03, 0x33, 0xa1, 0x77, 0xb8, 0x6f, 0x0c, 0x5b, 0xef, 0xcd, 0x83, 0x3e, 0xf2,
	0x84, 0x6c, 0x57, 0x0d, 0x18, 0x82, 0xcb, 0x7d, 0x64, 0xa9, 0xbe, 0x3b, 0x6c, 0xd5, 0xc8, 0xe3,
	0x92, 0x83, 0x60, 0x1c, 0xab, 0x24, 0x51, 0xb7, 0x42, 0x7b, 0x2f, 0x6f, 0xbb, 0xe6, 0x53, 0xa2,
	0xce, 0xcd, 0x1f, 0x93, 0xb6, 0x9c, 0x64, 0x4a, 0x0b, 0x2f, 0xe4, 0x3f, 0xd2, 0x38, 0x6c, 0xe8,
	0x33, 0xf8, 0xdd, 0x32, 0xb1, 0xfb, 0x81, 0x32, 0xf1, 0xab, 0x1d, 0x27, 0xf8, 0xd5, 0x8e, 0x43,
	0x07, 0xa4, 0x93, 0x89, 0x5b, 0xc3, 0xa0, 0x62, 0x62, 0x79, 0xb9, 0xe7, 0x32, 0x1a, 0xc0, 0x4b,
	0x65, 0xb0, 0xc2, 0x94, 0x49, 0x00, 0x0b, 0x32, 0x2d, 0xe0, 0x3e, 0x2b, 0x62, 0xfc, 0x10, 0x52,
	0x26, 0xc1, 0x85, 0x8a, 0x43, 0x8f, 0x0f, 0xfe, 0x71, 0x81, 0xf4, 0x86, 0x27, 0x32, 0x49, 0xe0,
	0x2a, 0x5c, 0x26, 0xdc, 0x43, 0x42, 0xc6, 0x52, 0x1b, 0x5f, 0x14, 0x1a, 0xae, 0x28, 0x20, 0x82,
	0x45, 0xe1, 0x3e, 0x69, 0xa1, 0xc6, 0xb5, 0x77, 0x6d, 0x13, 0x00, 0x24, 0xf7, 0x48, 0xd3, 0x27,
	0xf3, 0x63, 0x5f, 0x4e, 0xaa, 0x71, 0x8d, 0x3b, 0x2c, 0xfb, 0x42, 0x39, 0x86, 0x1a, 0x1d, 0x49,
	0x3b, 0xf3, 0xaf, 0x5c, 0xfc, 0x4d, 0xef, 0x91, 0x66, 0x61, 0x98, 0xfb, 0x58, 0xe0, 0x2a, 0xc3,
	0x6a, 0x61, 0x46, 0xf8, 0xb5, 0x00, 0x4a, 0x1b, 0x18, 0x5b, 0xcf, 0x58, 0xa4, 0x62, 0xe1, 0x0b,
	0xc2, 0x9a, 0xc7, 0x86, 0x2a, 0xae, 0x3a, 0x0d, 0xd2, 0x4d, 0xb7, 0x5b, 0x39, 0x86, 0x23, 0xbc,
	0x95, 0x39, 0xcb, 0x93, 0xc2, 0x1c, 0x61, 0xd2, 0x2f, 0x87, 0xcd, 0xb7, 0x32, 0xbf, 0x84, 0x31,
	0x14, 0xab, 0x7c, 0xaa, 0xb2, 0xf2, 0x65, 0xeb, 0x06, 0x5f, 0xfc, 0xf7, 0x2a, 0xd9, 0xfc, 0x40,
	0xe1, 0xa3, 0xdb, 0xe4, 0xfd, 0xd2, 0xd7, 0x6b, 0xd0, 0x2d, 0xd2, 0xf3, 0xf0, 0x0b, 0x9e, 0x0a,
	0x87, 0x2e, 0xd4, 0x84, 0x2f, 0xb9, 0xb6, 0x33, 0x07, 0x2f, 0xd2, 0x5d, 0xb2, 0xe9, 0xe1, 0x0b,
	0x81, 0x0f, 0x0f, 0x47, 0x2c, 0xd1, 0x07, 0x24, 0xf0, 0xc4, 0x28, 0x17, 0xf0, 0x10, 0x1c, 0xf2,
	0xc2, 0xf8, 0xd5, 0x96, 0x6b, 0xec, 0x45, 0x61, 0x64, 0x74, 0x9c, 0xc5, 0xc7, 0xda, 0x1a, 0xc7,
	0xae, 0xd0, 0x1d, 0x42, 0xab, 0xb9, 0xaa, 0xc2, 0x57, 0x6b, 0x9a, 0x5d, 0x69, 0x99, 0x3b, 0xb4,
	0x59, 0x43, 0x87, 0x53, 0x6e, 0x1d, 0xda, 0xa2, 0xf7, 0xc9, 0x6e, 0xed, 0x14, 0xa1, 0x48, 0x04,
	0x2f, 0xb7, 0x27, 0xf4, 0x1e, 0xd9, 0xf6, 0x64, 0x75, 0xb3, 0x75, 0xd4, 0x5a, 0x6d, 0x1e, 0x7e,
	0xaa, 0x70, 0x05, 0xcd, 0x91, 0x6d, 0xfa, 0x19, 0x19, 0x94, 0x46, 0xd0, 0xa2, 0x2c, 0x3a, 0x17,
	0xfc, 0x67, 0xa5, 0xeb, 0x72, 0x9d, 0xda, 0x22, 0xef, 0x91, 0x5d, 0xba, 0x47, 0x76, 0x3c, 0xf9,
	0xfc, 0x7c, 0x38, 0xa7, 0xd8, 0x3a, 0x7d, 0x48, 0xee, 0x79, 0xee, 0xac, 0xb0, 0x85, 0x9e, 0xd7,
	0xbb, 0x57, 0xdb, 0xff, 0x14, 0x2d, 0x73, 0xa5, 0x0a, 0x0d, 0xb1, 0x9c, 0xd9, 0x91, 0xd5, 0x82,
	0xa7, 0x4e, 0x6e, 0xa3, 0x76, 0xbe, 0xe7, 0xe2, 0xa6, 0x4e, 0xd1, 0x9a, 0xe5, 0xcf, 0x78, 0xaa,
	0x20, 0x28, 0xef, 0xd8, 0xcd, 0xda, 0x44, 0xb0, 0xda, 0x88, 0x27, 0xc2, 0x1b, 0x7f, 0xab, 0xa6,
	0x1a, 0x50, 0x2f, 0xad, 0x48, 0x6b, 0xf4, 0x76, 0x8d, 0x7e, 0x89, 0x02, 0x27, 0x2a, 0x2b, 0xcc,
	0xdf, 0x5e, 0x3a, 0x7a, 0xa7, 0x76, 0x68, 0x47, 0x9f, 0x2b, 0xe5, 0x4d, 0xbe, 0x5b, 0xb3, 0x96,
	0xe3, 0x2e, 0x85, 0x7e, 0xed, 0xd7, 0x0d, 0xe8, 0x23, 0x72, 0x7f, 0x8e, 0x1c, 0x4e, 0x79, 0x92,
	0x88, 0x6c, 0xe2, 0x6d, 0x72, 0xef, 0xbd, 0x8d, 0xf1, 0xf5, 0x56, 0xfa, 0x73, 0x8f, 0x6e, 0x92,
	0xf5, 0x92, 0x0e, 0xcf, 0x1d, 0x78, 0xbf, 0x16, 0x32, 0x70, 0xd9, 0x74, 0xe8, 0x83, 0x9a, 0x1e,
	0x27, 0xc2, 0xf2, 0x39, 0xd3, 0x3f, 0xa4, 0x9f, 0x92, 0xfe, 0xfb, 0xdb, 0x64, 0x76, 0x4e, 0xea,
	0xa3, 0xda, 0xc2, 0x67, 0x5a, 0x88, 0x2b, 0x2d, 0x79, 0xd2, 0x7b, 0x44, 0x03, 0xb2, 0x55, 0xc6,
	0x94, 0xe0, 0x46, 0x65, 0x7e, 0x52, 0xaf, 0x5f, 0x4b, 0x1f, 0xc7, 0xb8, 0x48, 0xe9, 0x7d, 0x5c,
	0x73, 0xc4, 0x50, 0x2b, 0x63, 0x20, 0xfd, 0xdd, 0x1e, 0x83, 0xf7, 0x0e, 0x8c, 0xf8, 0x0b, 0xfc,
	0x38, 0x93, 0xf4, 0x3e, 0xf9, 0xe2, 0xef, 0x1b, 0xe4, 0x01, 0xa4, 0x68, 0xe6, 0x33, 0xfa, 0x95,
	0xb2, 0x72, 0x2c, 0x23, 0xf7, 0x5a, 0x83, 0xb4, 0xdf, 0x20, 0x9d, 0xd7, 0xec, 0x14, 0x39, 0x6c,
	0x55, 0xbd, 0xdf, 0x79, 0xef, 0xb8, 0x77, 0x40, 0x99, 0x10, 0x8e, 0x6b, 0xf8, 0x64, 0x44, 0x0e,
	0x5f, 0x0b, 0x0e, 0x5f, 0xa8, 0xcf, 0xf1, 0xdb, 0x5d, 0xf0, 0x37, 0xb0, 0x41, 0x6f, 0xf1, 0xd9,
	0x88, 0xd0, 0xd4, 0x4c, 0x72, 0xa5, 0x12, 0x66, 0xd4, 0xd8, 0xb2, 0x44, 0xa6, 0xd2, 0xd2, 0x47,
	0x07, 0xee, 0xdf, 0x52, 0x07, 0xe5, 0xbf, 0xa5, 0x0e, 0xfc, 0x7f, 0x1b, 0xbe, 0xcf, 0x41, 0x39,
	0x13, 0xfc, 0xe9, 0x1f, 0x16, 0xf1, 0x13, 0xff, 0xc2, 0x93, 0xc3, 0xb0, 0xe7, 0x17, 0x18, 0xa9,
	0xb1, 0x3d, 0x87, 0xe9, 0xcf, 0xae, 0xee, 0x16, 0x9d, 0x72, 0x1d, 0xff, 0x7f, 0x17, 0xfd, 0x77,
	0xbf, 0xe8, 0xe2, 0x93, 0x6f, 0x8f, 0xaa, 0x55, 0xbf, 0xe3, 0x3a, 0x76, 0xab, 0xfe, 0x44, 0xb6,
	0xc6, 0x4a, 0x47, 0x82, 0xe5, 0xd3, 0x9c, 0xf9, 0x4f, 0x5c, 0x52, 0x65, 0xf4, 0xc1, 0x7b, 0xeb,
	0x9e, 0xc9, 0xe4, 0x1d, 0x4d, 0x9b, 0xcf, 0x96, 0xc7, 0x3c, 0x31, 0x22, 0xa4, 0xb8, 0xc4, 0xe5,
	0x34, 0x7f, 0x51, 0x2d, 0xf0, 0x8c, 0x91, 0x00, 0x96, 0x54, 0x85, 0xcd, 0x0b, 0xcb, 0x78, 0x72,
	0xcb, 0x67, 0x86, 0x65, 0x45, 0x7a, 0x2d, 0x34, 0x7d, 0xf8, 0x81, 0xc5, 0x45, 0x12, 0x97, 0xab,
	0xff, 0xc7, 0xfc, 0xea, 0xdb, 0xf9, 0x34, 0xff, 0x1e, 0x97, 0x39, 0xc6, 0x55, 0x5e, 0xe1, 0x22,
	0x27, 0xad, 0x3f, 0xfe, 0x73, 0xd0, 0xf8, 0xae, 0xf1, 0xc7, 0x46, 0xe3, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x08, 0x0c, 0x80, 0xfd, 0x0a, 0x1c, 0x00, 0x00,
}
