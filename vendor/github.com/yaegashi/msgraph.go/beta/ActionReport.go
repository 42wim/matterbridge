// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// ApplicationSignInDetailedSummary returns request builder for ApplicationSignInDetailedSummary collection
func (b *ReportRootRequestBuilder) ApplicationSignInDetailedSummary() *ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder {
	bb := &ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/applicationSignInDetailedSummary"
	return bb
}

// ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder is request builder for ApplicationSignInDetailedSummary collection
type ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ApplicationSignInDetailedSummary collection
func (b *ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder) Request() *ReportRootApplicationSignInDetailedSummaryCollectionRequest {
	return &ReportRootApplicationSignInDetailedSummaryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ApplicationSignInDetailedSummary item
func (b *ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder) ID(id string) *ApplicationSignInDetailedSummaryRequestBuilder {
	bb := &ApplicationSignInDetailedSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootApplicationSignInDetailedSummaryCollectionRequest is request for ApplicationSignInDetailedSummary collection
type ReportRootApplicationSignInDetailedSummaryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ApplicationSignInDetailedSummary collection
func (r *ReportRootApplicationSignInDetailedSummaryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ApplicationSignInDetailedSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ApplicationSignInDetailedSummary
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ApplicationSignInDetailedSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ApplicationSignInDetailedSummary collection, max N pages
func (r *ReportRootApplicationSignInDetailedSummaryCollectionRequest) GetN(ctx context.Context, n int) ([]ApplicationSignInDetailedSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ApplicationSignInDetailedSummary collection
func (r *ReportRootApplicationSignInDetailedSummaryCollectionRequest) Get(ctx context.Context) ([]ApplicationSignInDetailedSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ApplicationSignInDetailedSummary collection
func (r *ReportRootApplicationSignInDetailedSummaryCollectionRequest) Add(ctx context.Context, reqObj *ApplicationSignInDetailedSummary) (resObj *ApplicationSignInDetailedSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CredentialUserRegistrationDetails returns request builder for CredentialUserRegistrationDetails collection
func (b *ReportRootRequestBuilder) CredentialUserRegistrationDetails() *ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder {
	bb := &ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/credentialUserRegistrationDetails"
	return bb
}

// ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder is request builder for CredentialUserRegistrationDetails collection
type ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CredentialUserRegistrationDetails collection
func (b *ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder) Request() *ReportRootCredentialUserRegistrationDetailsCollectionRequest {
	return &ReportRootCredentialUserRegistrationDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CredentialUserRegistrationDetails item
func (b *ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder) ID(id string) *CredentialUserRegistrationDetailsRequestBuilder {
	bb := &CredentialUserRegistrationDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootCredentialUserRegistrationDetailsCollectionRequest is request for CredentialUserRegistrationDetails collection
type ReportRootCredentialUserRegistrationDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CredentialUserRegistrationDetails collection
func (r *ReportRootCredentialUserRegistrationDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CredentialUserRegistrationDetails, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CredentialUserRegistrationDetails
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CredentialUserRegistrationDetails
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CredentialUserRegistrationDetails collection, max N pages
func (r *ReportRootCredentialUserRegistrationDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]CredentialUserRegistrationDetails, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CredentialUserRegistrationDetails collection
func (r *ReportRootCredentialUserRegistrationDetailsCollectionRequest) Get(ctx context.Context) ([]CredentialUserRegistrationDetails, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CredentialUserRegistrationDetails collection
func (r *ReportRootCredentialUserRegistrationDetailsCollectionRequest) Add(ctx context.Context, reqObj *CredentialUserRegistrationDetails) (resObj *CredentialUserRegistrationDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserCredentialUsageDetails returns request builder for UserCredentialUsageDetails collection
func (b *ReportRootRequestBuilder) UserCredentialUsageDetails() *ReportRootUserCredentialUsageDetailsCollectionRequestBuilder {
	bb := &ReportRootUserCredentialUsageDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userCredentialUsageDetails"
	return bb
}

// ReportRootUserCredentialUsageDetailsCollectionRequestBuilder is request builder for UserCredentialUsageDetails collection
type ReportRootUserCredentialUsageDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserCredentialUsageDetails collection
func (b *ReportRootUserCredentialUsageDetailsCollectionRequestBuilder) Request() *ReportRootUserCredentialUsageDetailsCollectionRequest {
	return &ReportRootUserCredentialUsageDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserCredentialUsageDetails item
func (b *ReportRootUserCredentialUsageDetailsCollectionRequestBuilder) ID(id string) *UserCredentialUsageDetailsRequestBuilder {
	bb := &UserCredentialUsageDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootUserCredentialUsageDetailsCollectionRequest is request for UserCredentialUsageDetails collection
type ReportRootUserCredentialUsageDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserCredentialUsageDetails collection
func (r *ReportRootUserCredentialUsageDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserCredentialUsageDetails, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserCredentialUsageDetails
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserCredentialUsageDetails
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserCredentialUsageDetails collection, max N pages
func (r *ReportRootUserCredentialUsageDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]UserCredentialUsageDetails, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserCredentialUsageDetails collection
func (r *ReportRootUserCredentialUsageDetailsCollectionRequest) Get(ctx context.Context) ([]UserCredentialUsageDetails, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserCredentialUsageDetails collection
func (r *ReportRootUserCredentialUsageDetailsCollectionRequest) Add(ctx context.Context, reqObj *UserCredentialUsageDetails) (resObj *UserCredentialUsageDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
