// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import "context"

// PostRequestBuilder is request builder for Post
type PostRequestBuilder struct{ BaseRequestBuilder }

// Request returns PostRequest
func (b *PostRequestBuilder) Request() *PostRequest {
	return &PostRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PostRequest is request for Post
type PostRequest struct{ BaseRequest }

// Get performs GET request for Post
func (r *PostRequest) Get(ctx context.Context) (resObj *Post, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Post
func (r *PostRequest) Update(ctx context.Context, reqObj *Post) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Post
func (r *PostRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

//
type PostReplyRequestBuilder struct{ BaseRequestBuilder }

// Reply action undocumented
func (b *PostRequestBuilder) Reply(reqObj *PostReplyRequestParameter) *PostReplyRequestBuilder {
	bb := &PostReplyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/reply"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type PostReplyRequest struct{ BaseRequest }

//
func (b *PostReplyRequestBuilder) Request() *PostReplyRequest {
	return &PostReplyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *PostReplyRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
type PostForwardRequestBuilder struct{ BaseRequestBuilder }

// Forward action undocumented
func (b *PostRequestBuilder) Forward(reqObj *PostForwardRequestParameter) *PostForwardRequestBuilder {
	bb := &PostForwardRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/forward"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type PostForwardRequest struct{ BaseRequest }

//
func (b *PostForwardRequestBuilder) Request() *PostForwardRequest {
	return &PostForwardRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *PostForwardRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
