// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ownertoken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// OwnerTokenMetaData contains all meta data concerning the OwnerToken contract.
var OwnerTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signerPublicKey\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BaseToken_MaxSupplyLowerThanTotalSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseToken_MaxSupplyReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseToken_NotRemoteBurnable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseToken_NotTransferable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommunityOwnable_InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CommunityOwnable_NotAuthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StatusMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"remoteBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remoteBurnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_newSignerPublicKey\",\"type\":\"bytes\"}],\"name\":\"setSignerPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101006040523480156200001257600080fd5b5060405162003b7438038062003b74833981016040819052620000359162000ac2565b84846001600081873080808089898862000050838262000c2b565b5060016200005f828262000c2b565b5050506001600160a01b03808316608081905290821660a0521580156200008f575060a0516001600160a01b0316155b15620000ae5760405163c9d8a9b360e01b815260040160405180910390fd5b5050600b86905584151560c05283151560e052600c620000cf848262000c2b565b50505050505050505080600d9081620000e9919062000c2b565b5060408051600180825281830190925260009160208083019080368337019050509050828160008151811062000123576200012362000cf7565b6001600160a01b0390921660209283029190910190910152620001468162000152565b50505050505062000dfa565b60005b81518110156200024c57620001ac82828151811062000178576200017862000cf7565b602002602001015162000197600a6200025060201b620013e41760201c565b60408051602081019091526000815262000254565b620001c3600a6200025060201b620013e41760201c565b828281518110620001d857620001d862000cf7565b60200260200101516001600160a01b031660006001600160a01b03167f28c427b0611d99da5c4f7368abe57e86b045b483c4689ae93e90745802335b8760405160405180910390a462000237600a620002d060201b620013e81760201c565b80620002438162000d23565b91505062000155565b5050565b5490565b620002608383620002d9565b6200026f60008484846200047a565b620002cb5760405162461bcd60e51b8152602060048201526032602482015260008051602062003b5483398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084015b60405180910390fd5b505050565b80546001019055565b6001600160a01b038216620003315760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401620002c2565b6000818152600260205260409020546001600160a01b031615620003985760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401620002c2565b620003a8600083836001620005d6565b6000818152600260205260409020546001600160a01b0316156200040f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401620002c2565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006200049b846001600160a01b03166200064260201b620013f11760201c565b15620005ca57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290620004d590339089908890889060040162000d3f565b6020604051808303816000875af192505050801562000513575060408051601f3d908101601f19168201909252620005109181019062000d95565b60015b620005af573d80801562000544576040519150601f19603f3d011682016040523d82523d6000602084013e62000549565b606091505b508051600003620005a75760405162461bcd60e51b8152602060048201526032602482015260008051602062003b5483398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401620002c2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050620005ce565b5060015b949350505050565b6001600160a01b03841615801590620005f757506001600160a01b03831615155b801562000604575060e051155b1562000623576040516306b2b9e560e41b815260040160405180910390fd5b6200063c848484846200065160201b620014001760201c565b50505050565b6001600160a01b03163b151590565b6200066a848484846200063c60201b6200111a1760201c565b6001811115620006e35760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401620002c2565b816001600160a01b03851662000742576200073c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b62000768565b836001600160a01b0316856001600160a01b0316146200076857620007688582620007b5565b6001600160a01b0384166200078857620007828162000862565b620007ae565b846001600160a01b0316846001600160a01b031614620007ae57620007ae84826200091c565b5050505050565b60006001620007cf846200096d60201b62000de81760201c565b620007db919062000dc8565b6000838152600760205260409020549091508082146200082f576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090620008769060019062000dc8565b60008381526009602052604081205460088054939450909284908110620008a157620008a162000cf7565b906000526020600020015490508060088381548110620008c557620008c562000cf7565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548062000900576200090062000de4565b6001900381819060005260206000200160009055905550505050565b600062000934836200096d60201b62000de81760201c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160a01b038216620009d95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401620002c2565b506001600160a01b031660009081526003602052604090205490565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000a2857818101518382015260200162000a0e565b50506000910152565b600082601f83011262000a4357600080fd5b81516001600160401b038082111562000a605762000a60620009f5565b604051601f8301601f19908116603f0116810190828211818310171562000a8b5762000a8b620009f5565b8160405283815286602085880101111562000aa557600080fd5b62000ab884602083016020890162000a0b565b9695505050505050565b600080600080600060a0868803121562000adb57600080fd5b85516001600160401b038082111562000af357600080fd5b62000b0189838a0162000a31565b9650602088015191508082111562000b1857600080fd5b62000b2689838a0162000a31565b9550604088015191508082111562000b3d57600080fd5b62000b4b89838a0162000a31565b606089015190955091506001600160a01b038216821462000b6b57600080fd5b60808801519193508082111562000b8157600080fd5b5062000b908882890162000a31565b9150509295509295909350565b600181811c9082168062000bb257607f821691505b60208210810362000bd357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002cb57600081815260208120601f850160051c8101602086101562000c025750805b601f850160051c820191505b8181101562000c235782815560010162000c0e565b505050505050565b81516001600160401b0381111562000c475762000c47620009f5565b62000c5f8162000c58845462000b9d565b8462000bd9565b602080601f83116001811462000c97576000841562000c7e5750858301515b600019600386901b1c1916600185901b17855562000c23565b600085815260208120601f198616915b8281101562000cc85788860151825594840194600190910190840162000ca7565b508582101562000ce75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820162000d385762000d3862000d0d565b5060010190565b600060018060a01b03808716835280861660208401525083604083015260806060830152825180608084015262000d7e8160a085016020870162000a0b565b601f01601f19169190910160a00195945050505050565b60006020828403121562000da857600080fd5b81516001600160e01b03198116811462000dc157600080fd5b9392505050565b8181038181111562000dde5762000dde62000d0d565b92915050565b634e487b7160e01b600052603160045260246000fd5b60805160a05160c05160e051612ca262000eb2600039600081816103720152611f8801526000818161024b0152610a2a0152600081816102970152818161091d0152818161097c01528181610c9501528181610cf401528181610f6101528181610fc00152818161126601526112c5015260008181610325015281816108400152818161089f01528181610bb801528181610c1701528181610e8401528181610ee30152818161118901526111e80152612ca26000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806365371883116100f9578063b88d4fde11610097578063cf721b1511610071578063cf721b15146103fb578063d547cfb714610403578063d5abeb011461040b578063e985e9c51461041457600080fd5b8063b88d4fde146103c2578063c87b56dd146103d5578063ce7c8b49146103e857600080fd5b806392ff0d31116100d357806392ff0d311461036d5780639404c91a1461039457806395d89b41146103a7578063a22cb465146103af57600080fd5b806365371883146103205780636f8b44b01461034757806370a082311461035a57600080fd5b80632bb5e31e116101665780634f6ccce7116101405780634f6ccce7146102df5780634fb95e02146102f2578063549a95ea146103055780636352211e1461030d57600080fd5b80632bb5e31e146102925780632f745c59146102b957806342842e0e146102cc57600080fd5b8063095ea7b3116101a2578063095ea7b314610231578063101639f51461024657806318160ddd1461026d57806323b872dd1461027f57600080fd5b806301ffc9a7146101c957806306fdde03146101f1578063081812fc14610206575b600080fd5b6101dc6101d73660046124f5565b610450565b60405190151581526020015b60405180910390f35b6101f9610461565b6040516101e89190612580565b610219610214366004612593565b6104f3565b6040516001600160a01b0390911681526020016101e8565b61024461023f3660046125c8565b61051a565b005b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6008545b6040519081526020016101e8565b61024461028d3660046125f2565b610650565b6102197f000000000000000000000000000000000000000000000000000000000000000081565b6102716102c73660046125c8565b6106d7565b6102446102da3660046125f2565b61077f565b6102716102ed366004612593565b61079a565b6102446103003660046126d0565b61083e565b6101f9610ac3565b61021961031b366004612593565b610b51565b6102197f000000000000000000000000000000000000000000000000000000000000000081565b610244610355366004612593565b610bb6565b610271610368366004612766565b610de8565b6101dc7f000000000000000000000000000000000000000000000000000000000000000081565b6102446103a236600461280f565b610e82565b6101f9611078565b6102446103bd366004612844565b611087565b6102446103d0366004612880565b611092565b6101f96103e3366004612593565b611120565b6102446103f63660046128e8565b611187565b6102716113c7565b6101f96113d7565b610271600b5481565b6101dc610422366004612975565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b600061045b8261153c565b92915050565b606060008054610470906129a8565b80601f016020809104026020016040519081016040528092919081815260200182805461049c906129a8565b80156104e95780601f106104be576101008083540402835291602001916104e9565b820191906000526020600020905b8154815290600101906020018083116104cc57829003601f168201915b5050505050905090565b60006104fe82611592565b506000908152600460205260409020546001600160a01b031690565b600061052582610b51565b9050806001600160a01b0316836001600160a01b0316036105b35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806105cf57506105cf8133610422565b6106415760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016105aa565b61064b83836115f6565b505050565b61065a338261167c565b6106cc5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016105aa565b61064b8383836116fb565b60006106e283610de8565b82106107565760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016105aa565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61064b83838360405180602001604052806000815250611092565b60006107a560085490565b82106108195760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016105aa565b6008828154811061082c5761082c6129fb565b90600052602060002001549050919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161580159061091457506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109129190612a2a565b155b80156109f157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316158015906109f157506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef9190612a2a565b155b15610a28576040517f7cea464e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000610a7f576040517f98209e6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8151811015610abf57610aad828281518110610aa057610aa06129fb565b6020026020010151611949565b80610ab781612a72565b915050610a82565b5050565b600d8054610ad0906129a8565b80601f0160208091040260200160405190810160405280929190818152602001828054610afc906129a8565b8015610b495780601f10610b1e57610100808354040283529160200191610b49565b820191906000526020600020905b815481529060010190602001808311610b2c57829003601f168201915b505050505081565b6000818152600260205260408120546001600160a01b03168061045b5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016105aa565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615801590610c8c57506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190612a2a565b155b8015610d6957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615801590610d6957506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190612a2a565b155b15610da0576040517f7cea464e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405162461bcd60e51b815260206004820152601160248201527f6d617820737570706c79206c6f636b656400000000000000000000000000000060448201526064016105aa565b60006001600160a01b038216610e665760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e6572000000000000000000000000000000000000000000000060648201526084016105aa565b506001600160a01b031660009081526003602052604090205490565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031615801590610f5857506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f569190612a2a565b155b801561103557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161580159061103557506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561100f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110339190612a2a565b155b1561106c576040517f7cea464e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d610abf8282612ada565b606060018054610470906129a8565b610abf338383611a04565b61109c338361167c565b61110e5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f7665640000000000000000000000000000000000000060648201526084016105aa565b61111a84848484611af0565b50505050565b606061112b82611592565b6000611135611b79565b905060008151116111555760405180602001604052806000815250611180565b8061115f84611b88565b604051602001611170929190612bb8565b6040516020818303038152906040525b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161580159061125d57506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125b9190612a2a565b155b801561133a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161580159061133a57506040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113389190612a2a565b155b15611371576040517f7cea464e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b548151600a546113839190612be7565b11156113bb576040517f23d6539900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113c481611c28565b50565b60006113d2600a5490565b905090565b600c8054610ad0906129a8565b5490565b80546001019055565b6001600160a01b03163b151590565b60018111156114775760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f72746564000000000000000000000060648201526084016105aa565b816001600160a01b0385166114d3576114ce81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6114f6565b836001600160a01b0316856001600160a01b0316146114f6576114f68582611cec565b6001600160a01b0384166115125761150d81611d89565b611535565b846001600160a01b0316846001600160a01b031614611535576115358482611e38565b5050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061045b575061045b82611e7c565b6000818152600260205260409020546001600160a01b03166113c45760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e204944000000000000000060448201526064016105aa565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416908117909155819061164382610b51565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061168883610b51565b9050806001600160a01b0316846001600160a01b031614806116cf57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806116f35750836001600160a01b03166116e8846104f3565b6001600160a01b0316145b949350505050565b826001600160a01b031661170e82610b51565b6001600160a01b03161461178a5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016105aa565b6001600160a01b0382166118055760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016105aa565b6118128383836001611f5f565b826001600160a01b031661182582610b51565b6001600160a01b0316146118a15760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016105aa565b600081815260046020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061195482610b51565b9050611964816000846001611f5f565b61196d82610b51565b600083815260046020908152604080832080547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b816001600160a01b0316836001600160a01b031603611a655760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105aa565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611afb8484846116fb565b611b0784848484611fec565b61111a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016105aa565b6060600c8054610470906129a8565b60606000611b95836121ab565b600101905060008167ffffffffffffffff811115611bb557611bb561262e565b6040519080825280601f01601f191660200182016040528015611bdf576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611be957509392505050565b60005b8151811015610abf57611c6f828281518110611c4957611c496129fb565b6020026020010151611c5a600a5490565b6040518060200160405280600081525061228d565b600a54828281518110611c8457611c846129fb565b60200260200101516001600160a01b031660006001600160a01b03167f28c427b0611d99da5c4f7368abe57e86b045b483c4689ae93e90745802335b8760405160405180910390a4611cda600a80546001019055565b80611ce481612a72565b915050611c2b565b60006001611cf984610de8565b611d039190612bfa565b600083815260076020526040902054909150808214611d56576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611d9b90600190612bfa565b60008381526009602052604081205460088054939450909284908110611dc357611dc36129fb565b906000526020600020015490508060088381548110611de457611de46129fb565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611e1c57611e1c612c0d565b6001900381819060005260206000200160009055905550505050565b6000611e4383610de8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611f0f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061045b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083161461045b565b6001600160a01b03841615801590611f7f57506001600160a01b03831615155b8015611fa957507f0000000000000000000000000000000000000000000000000000000000000000155b15611fe0576040517f6b2b9e5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61111a84848484611400565b60006001600160a01b0384163b156121a0576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612049903390899088908890600401612c3c565b6020604051808303816000875af19250505080156120a2575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261209f91810190612c78565b60015b612155573d8080156120d0576040519150601f19603f3d011682016040523d82523d6000602084013e6120d5565b606091505b50805160000361214d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016105aa565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a02000000000000000000000000000000000000000000000000000000001490506116f3565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106121f4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612220576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061223e57662386f26fc10000830492506010015b6305f5e1008310612256576305f5e100830492506008015b612710831061226a57612710830492506004015b6064831061227c576064830492506002015b600a831061045b5760010192915050565b6122978383612316565b6122a46000848484611fec565b61064b5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016105aa565b6001600160a01b03821661236c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105aa565b6000818152600260205260409020546001600160a01b0316156123d15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105aa565b6123df600083836001611f5f565b6000818152600260205260409020546001600160a01b0316156124445760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105aa565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146113c457600080fd5b60006020828403121561250757600080fd5b8135611180816124c7565b60005b8381101561252d578181015183820152602001612515565b50506000910152565b6000815180845261254e816020860160208601612512565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111806020830184612536565b6000602082840312156125a557600080fd5b5035919050565b80356001600160a01b03811681146125c357600080fd5b919050565b600080604083850312156125db57600080fd5b6125e4836125ac565b946020939093013593505050565b60008060006060848603121561260757600080fd5b612610846125ac565b925061261e602085016125ac565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156126a4576126a461262e565b604052919050565b600067ffffffffffffffff8211156126c6576126c661262e565b5060051b60200190565b600060208083850312156126e357600080fd5b823567ffffffffffffffff8111156126fa57600080fd5b8301601f8101851361270b57600080fd5b803561271e612719826126ac565b61265d565b81815260059190911b8201830190838101908783111561273d57600080fd5b928401925b8284101561275b57833582529284019290840190612742565b979650505050505050565b60006020828403121561277857600080fd5b611180826125ac565b600082601f83011261279257600080fd5b813567ffffffffffffffff8111156127ac576127ac61262e565b6127dd60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161265d565b8181528460208386010111156127f257600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561282157600080fd5b813567ffffffffffffffff81111561283857600080fd5b6116f384828501612781565b6000806040838503121561285757600080fd5b612860836125ac565b91506020830135801515811461287557600080fd5b809150509250929050565b6000806000806080858703121561289657600080fd5b61289f856125ac565b93506128ad602086016125ac565b925060408501359150606085013567ffffffffffffffff8111156128d057600080fd5b6128dc87828801612781565b91505092959194509250565b600060208083850312156128fb57600080fd5b823567ffffffffffffffff81111561291257600080fd5b8301601f8101851361292357600080fd5b8035612931612719826126ac565b81815260059190911b8201830190838101908783111561295057600080fd5b928401925b8284101561275b57612966846125ac565b82529284019290840190612955565b6000806040838503121561298857600080fd5b612991836125ac565b915061299f602084016125ac565b90509250929050565b600181811c908216806129bc57607f821691505b6020821081036129f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612a3c57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006000198203612a8557612a85612a43565b5060010190565b601f82111561064b57600081815260208120601f850160051c81016020861015612ab35750805b601f850160051c820191505b81811015612ad257828155600101612abf565b505050505050565b815167ffffffffffffffff811115612af457612af461262e565b612b0881612b0284546129a8565b84612a8c565b602080601f831160018114612b3d5760008415612b255750858301515b600019600386901b1c1916600185901b178555612ad2565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015612b8a57888601518255948401946001909101908401612b6b565b5085821015612ba85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008351612bca818460208801612512565b835190830190612bde818360208801612512565b01949350505050565b8082018082111561045b5761045b612a43565b8181038181111561045b5761045b612a43565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152612c6e6080830184612536565b9695505050505050565b600060208284031215612c8a57600080fd5b8151611180816124c756fea164736f6c6343000811000a4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
}

// OwnerTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use OwnerTokenMetaData.ABI instead.
var OwnerTokenABI = OwnerTokenMetaData.ABI

// OwnerTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OwnerTokenMetaData.Bin instead.
var OwnerTokenBin = OwnerTokenMetaData.Bin

// DeployOwnerToken deploys a new Ethereum contract, binding an instance of OwnerToken to it.
func DeployOwnerToken(auth *bind.TransactOpts, backend bind.ContractBackend, _name string, _symbol string, _baseTokenURI string, _receiver common.Address, _signerPublicKey []byte) (common.Address, *types.Transaction, *OwnerToken, error) {
	parsed, err := OwnerTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OwnerTokenBin), backend, _name, _symbol, _baseTokenURI, _receiver, _signerPublicKey)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OwnerToken{OwnerTokenCaller: OwnerTokenCaller{contract: contract}, OwnerTokenTransactor: OwnerTokenTransactor{contract: contract}, OwnerTokenFilterer: OwnerTokenFilterer{contract: contract}}, nil
}

// OwnerToken is an auto generated Go binding around an Ethereum contract.
type OwnerToken struct {
	OwnerTokenCaller     // Read-only binding to the contract
	OwnerTokenTransactor // Write-only binding to the contract
	OwnerTokenFilterer   // Log filterer for contract events
}

// OwnerTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnerTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnerTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnerTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnerTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnerTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnerTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnerTokenSession struct {
	Contract     *OwnerToken       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnerTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnerTokenCallerSession struct {
	Contract *OwnerTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// OwnerTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnerTokenTransactorSession struct {
	Contract     *OwnerTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// OwnerTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnerTokenRaw struct {
	Contract *OwnerToken // Generic contract binding to access the raw methods on
}

// OwnerTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnerTokenCallerRaw struct {
	Contract *OwnerTokenCaller // Generic read-only contract binding to access the raw methods on
}

// OwnerTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnerTokenTransactorRaw struct {
	Contract *OwnerTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnerToken creates a new instance of OwnerToken, bound to a specific deployed contract.
func NewOwnerToken(address common.Address, backend bind.ContractBackend) (*OwnerToken, error) {
	contract, err := bindOwnerToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OwnerToken{OwnerTokenCaller: OwnerTokenCaller{contract: contract}, OwnerTokenTransactor: OwnerTokenTransactor{contract: contract}, OwnerTokenFilterer: OwnerTokenFilterer{contract: contract}}, nil
}

// NewOwnerTokenCaller creates a new read-only instance of OwnerToken, bound to a specific deployed contract.
func NewOwnerTokenCaller(address common.Address, caller bind.ContractCaller) (*OwnerTokenCaller, error) {
	contract, err := bindOwnerToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnerTokenCaller{contract: contract}, nil
}

// NewOwnerTokenTransactor creates a new write-only instance of OwnerToken, bound to a specific deployed contract.
func NewOwnerTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnerTokenTransactor, error) {
	contract, err := bindOwnerToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnerTokenTransactor{contract: contract}, nil
}

// NewOwnerTokenFilterer creates a new log filterer instance of OwnerToken, bound to a specific deployed contract.
func NewOwnerTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnerTokenFilterer, error) {
	contract, err := bindOwnerToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnerTokenFilterer{contract: contract}, nil
}

// bindOwnerToken binds a generic wrapper to an already deployed contract.
func bindOwnerToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OwnerTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OwnerToken *OwnerTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OwnerToken.Contract.OwnerTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OwnerToken *OwnerTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OwnerToken.Contract.OwnerTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OwnerToken *OwnerTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OwnerToken.Contract.OwnerTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OwnerToken *OwnerTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OwnerToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OwnerToken *OwnerTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OwnerToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OwnerToken *OwnerTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OwnerToken.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_OwnerToken *OwnerTokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_OwnerToken *OwnerTokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _OwnerToken.Contract.BalanceOf(&_OwnerToken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_OwnerToken *OwnerTokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _OwnerToken.Contract.BalanceOf(&_OwnerToken.CallOpts, owner)
}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_OwnerToken *OwnerTokenCaller) BaseTokenURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "baseTokenURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_OwnerToken *OwnerTokenSession) BaseTokenURI() (string, error) {
	return _OwnerToken.Contract.BaseTokenURI(&_OwnerToken.CallOpts)
}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_OwnerToken *OwnerTokenCallerSession) BaseTokenURI() (string, error) {
	return _OwnerToken.Contract.BaseTokenURI(&_OwnerToken.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_OwnerToken *OwnerTokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_OwnerToken *OwnerTokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _OwnerToken.Contract.GetApproved(&_OwnerToken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_OwnerToken *OwnerTokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _OwnerToken.Contract.GetApproved(&_OwnerToken.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_OwnerToken *OwnerTokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_OwnerToken *OwnerTokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _OwnerToken.Contract.IsApprovedForAll(&_OwnerToken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_OwnerToken *OwnerTokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _OwnerToken.Contract.IsApprovedForAll(&_OwnerToken.CallOpts, owner, operator)
}

// MasterToken is a free data retrieval call binding the contract method 0x2bb5e31e.
//
// Solidity: function masterToken() view returns(address)
func (_OwnerToken *OwnerTokenCaller) MasterToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "masterToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MasterToken is a free data retrieval call binding the contract method 0x2bb5e31e.
//
// Solidity: function masterToken() view returns(address)
func (_OwnerToken *OwnerTokenSession) MasterToken() (common.Address, error) {
	return _OwnerToken.Contract.MasterToken(&_OwnerToken.CallOpts)
}

// MasterToken is a free data retrieval call binding the contract method 0x2bb5e31e.
//
// Solidity: function masterToken() view returns(address)
func (_OwnerToken *OwnerTokenCallerSession) MasterToken() (common.Address, error) {
	return _OwnerToken.Contract.MasterToken(&_OwnerToken.CallOpts)
}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_OwnerToken *OwnerTokenCaller) MaxSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "maxSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_OwnerToken *OwnerTokenSession) MaxSupply() (*big.Int, error) {
	return _OwnerToken.Contract.MaxSupply(&_OwnerToken.CallOpts)
}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_OwnerToken *OwnerTokenCallerSession) MaxSupply() (*big.Int, error) {
	return _OwnerToken.Contract.MaxSupply(&_OwnerToken.CallOpts)
}

// MintedCount is a free data retrieval call binding the contract method 0xcf721b15.
//
// Solidity: function mintedCount() view returns(uint256)
func (_OwnerToken *OwnerTokenCaller) MintedCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "mintedCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MintedCount is a free data retrieval call binding the contract method 0xcf721b15.
//
// Solidity: function mintedCount() view returns(uint256)
func (_OwnerToken *OwnerTokenSession) MintedCount() (*big.Int, error) {
	return _OwnerToken.Contract.MintedCount(&_OwnerToken.CallOpts)
}

// MintedCount is a free data retrieval call binding the contract method 0xcf721b15.
//
// Solidity: function mintedCount() view returns(uint256)
func (_OwnerToken *OwnerTokenCallerSession) MintedCount() (*big.Int, error) {
	return _OwnerToken.Contract.MintedCount(&_OwnerToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_OwnerToken *OwnerTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_OwnerToken *OwnerTokenSession) Name() (string, error) {
	return _OwnerToken.Contract.Name(&_OwnerToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_OwnerToken *OwnerTokenCallerSession) Name() (string, error) {
	return _OwnerToken.Contract.Name(&_OwnerToken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_OwnerToken *OwnerTokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_OwnerToken *OwnerTokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _OwnerToken.Contract.OwnerOf(&_OwnerToken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_OwnerToken *OwnerTokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _OwnerToken.Contract.OwnerOf(&_OwnerToken.CallOpts, tokenId)
}

// OwnerToken is a free data retrieval call binding the contract method 0x65371883.
//
// Solidity: function ownerToken() view returns(address)
func (_OwnerToken *OwnerTokenCaller) OwnerToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "ownerToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerToken is a free data retrieval call binding the contract method 0x65371883.
//
// Solidity: function ownerToken() view returns(address)
func (_OwnerToken *OwnerTokenSession) OwnerToken() (common.Address, error) {
	return _OwnerToken.Contract.OwnerToken(&_OwnerToken.CallOpts)
}

// OwnerToken is a free data retrieval call binding the contract method 0x65371883.
//
// Solidity: function ownerToken() view returns(address)
func (_OwnerToken *OwnerTokenCallerSession) OwnerToken() (common.Address, error) {
	return _OwnerToken.Contract.OwnerToken(&_OwnerToken.CallOpts)
}

// RemoteBurnable is a free data retrieval call binding the contract method 0x101639f5.
//
// Solidity: function remoteBurnable() view returns(bool)
func (_OwnerToken *OwnerTokenCaller) RemoteBurnable(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "remoteBurnable")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RemoteBurnable is a free data retrieval call binding the contract method 0x101639f5.
//
// Solidity: function remoteBurnable() view returns(bool)
func (_OwnerToken *OwnerTokenSession) RemoteBurnable() (bool, error) {
	return _OwnerToken.Contract.RemoteBurnable(&_OwnerToken.CallOpts)
}

// RemoteBurnable is a free data retrieval call binding the contract method 0x101639f5.
//
// Solidity: function remoteBurnable() view returns(bool)
func (_OwnerToken *OwnerTokenCallerSession) RemoteBurnable() (bool, error) {
	return _OwnerToken.Contract.RemoteBurnable(&_OwnerToken.CallOpts)
}

// SignerPublicKey is a free data retrieval call binding the contract method 0x549a95ea.
//
// Solidity: function signerPublicKey() view returns(bytes)
func (_OwnerToken *OwnerTokenCaller) SignerPublicKey(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "signerPublicKey")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SignerPublicKey is a free data retrieval call binding the contract method 0x549a95ea.
//
// Solidity: function signerPublicKey() view returns(bytes)
func (_OwnerToken *OwnerTokenSession) SignerPublicKey() ([]byte, error) {
	return _OwnerToken.Contract.SignerPublicKey(&_OwnerToken.CallOpts)
}

// SignerPublicKey is a free data retrieval call binding the contract method 0x549a95ea.
//
// Solidity: function signerPublicKey() view returns(bytes)
func (_OwnerToken *OwnerTokenCallerSession) SignerPublicKey() ([]byte, error) {
	return _OwnerToken.Contract.SignerPublicKey(&_OwnerToken.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_OwnerToken *OwnerTokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_OwnerToken *OwnerTokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _OwnerToken.Contract.SupportsInterface(&_OwnerToken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_OwnerToken *OwnerTokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _OwnerToken.Contract.SupportsInterface(&_OwnerToken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_OwnerToken *OwnerTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_OwnerToken *OwnerTokenSession) Symbol() (string, error) {
	return _OwnerToken.Contract.Symbol(&_OwnerToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_OwnerToken *OwnerTokenCallerSession) Symbol() (string, error) {
	return _OwnerToken.Contract.Symbol(&_OwnerToken.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_OwnerToken *OwnerTokenCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_OwnerToken *OwnerTokenSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _OwnerToken.Contract.TokenByIndex(&_OwnerToken.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_OwnerToken *OwnerTokenCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _OwnerToken.Contract.TokenByIndex(&_OwnerToken.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_OwnerToken *OwnerTokenCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_OwnerToken *OwnerTokenSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _OwnerToken.Contract.TokenOfOwnerByIndex(&_OwnerToken.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_OwnerToken *OwnerTokenCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _OwnerToken.Contract.TokenOfOwnerByIndex(&_OwnerToken.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_OwnerToken *OwnerTokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_OwnerToken *OwnerTokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _OwnerToken.Contract.TokenURI(&_OwnerToken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_OwnerToken *OwnerTokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _OwnerToken.Contract.TokenURI(&_OwnerToken.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_OwnerToken *OwnerTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_OwnerToken *OwnerTokenSession) TotalSupply() (*big.Int, error) {
	return _OwnerToken.Contract.TotalSupply(&_OwnerToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_OwnerToken *OwnerTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _OwnerToken.Contract.TotalSupply(&_OwnerToken.CallOpts)
}

// Transferable is a free data retrieval call binding the contract method 0x92ff0d31.
//
// Solidity: function transferable() view returns(bool)
func (_OwnerToken *OwnerTokenCaller) Transferable(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OwnerToken.contract.Call(opts, &out, "transferable")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Transferable is a free data retrieval call binding the contract method 0x92ff0d31.
//
// Solidity: function transferable() view returns(bool)
func (_OwnerToken *OwnerTokenSession) Transferable() (bool, error) {
	return _OwnerToken.Contract.Transferable(&_OwnerToken.CallOpts)
}

// Transferable is a free data retrieval call binding the contract method 0x92ff0d31.
//
// Solidity: function transferable() view returns(bool)
func (_OwnerToken *OwnerTokenCallerSession) Transferable() (bool, error) {
	return _OwnerToken.Contract.Transferable(&_OwnerToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_OwnerToken *OwnerTokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _OwnerToken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_OwnerToken *OwnerTokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _OwnerToken.Contract.Approve(&_OwnerToken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_OwnerToken *OwnerTokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _OwnerToken.Contract.Approve(&_OwnerToken.TransactOpts, to, tokenId)
}

// MintTo is a paid mutator transaction binding the contract method 0xce7c8b49.
//
// Solidity: function mintTo(address[] addresses) returns()
func (_OwnerToken *OwnerTokenTransactor) MintTo(opts *bind.TransactOpts, addresses []common.Address) (*types.Transaction, error) {
	return _OwnerToken.contract.Transact(opts, "mintTo", addresses)
}

// MintTo is a paid mutator transaction binding the contract method 0xce7c8b49.
//
// Solidity: function mintTo(address[] addresses) returns()
func (_OwnerToken *OwnerTokenSession) MintTo(addresses []common.Address) (*types.Transaction, error) {
	return _OwnerToken.Contract.MintTo(&_OwnerToken.TransactOpts, addresses)
}

// MintTo is a paid mutator transaction binding the contract method 0xce7c8b49.
//
// Solidity: function mintTo(address[] addresses) returns()
func (_OwnerToken *OwnerTokenTransactorSession) MintTo(addresses []common.Address) (*types.Transaction, error) {
	return _OwnerToken.Contract.MintTo(&_OwnerToken.TransactOpts, addresses)
}

// RemoteBurn is a paid mutator transaction binding the contract method 0x4fb95e02.
//
// Solidity: function remoteBurn(uint256[] tokenIds) returns()
func (_OwnerToken *OwnerTokenTransactor) RemoteBurn(opts *bind.TransactOpts, tokenIds []*big.Int) (*types.Transaction, error) {
	return _OwnerToken.contract.Transact(opts, "remoteBurn", tokenIds)
}

// RemoteBurn is a paid mutator transaction binding the contract method 0x4fb95e02.
//
// Solidity: function remoteBurn(uint256[] tokenIds) returns()
func (_OwnerToken *OwnerTokenSession) RemoteBurn(tokenIds []*big.Int) (*types.Transaction, error) {
	return _OwnerToken.Contract.RemoteBurn(&_OwnerToken.TransactOpts, tokenIds)
}

// RemoteBurn is a paid mutator transaction binding the contract method 0x4fb95e02.
//
// Solidity: function remoteBurn(uint256[] tokenIds) returns()
func (_OwnerToken *OwnerTokenTransactorSession) RemoteBurn(tokenIds []*big.Int) (*types.Transaction, error) {
	return _OwnerToken.Contract.RemoteBurn(&_OwnerToken.TransactOpts, tokenIds)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_OwnerToken *OwnerTokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _OwnerToken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_OwnerToken *OwnerTokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _OwnerToken.Contract.SafeTransferFrom(&_OwnerToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_OwnerToken *OwnerTokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _OwnerToken.Contract.SafeTransferFrom(&_OwnerToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_OwnerToken *OwnerTokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _OwnerToken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_OwnerToken *OwnerTokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _OwnerToken.Contract.SafeTransferFrom0(&_OwnerToken.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_OwnerToken *OwnerTokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _OwnerToken.Contract.SafeTransferFrom0(&_OwnerToken.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_OwnerToken *OwnerTokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _OwnerToken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_OwnerToken *OwnerTokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _OwnerToken.Contract.SetApprovalForAll(&_OwnerToken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_OwnerToken *OwnerTokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _OwnerToken.Contract.SetApprovalForAll(&_OwnerToken.TransactOpts, operator, approved)
}

// SetMaxSupply is a paid mutator transaction binding the contract method 0x6f8b44b0.
//
// Solidity: function setMaxSupply(uint256 _newMaxSupply) returns()
func (_OwnerToken *OwnerTokenTransactor) SetMaxSupply(opts *bind.TransactOpts, _newMaxSupply *big.Int) (*types.Transaction, error) {
	return _OwnerToken.contract.Transact(opts, "setMaxSupply", _newMaxSupply)
}

// SetMaxSupply is a paid mutator transaction binding the contract method 0x6f8b44b0.
//
// Solidity: function setMaxSupply(uint256 _newMaxSupply) returns()
func (_OwnerToken *OwnerTokenSession) SetMaxSupply(_newMaxSupply *big.Int) (*types.Transaction, error) {
	return _OwnerToken.Contract.SetMaxSupply(&_OwnerToken.TransactOpts, _newMaxSupply)
}

// SetMaxSupply is a paid mutator transaction binding the contract method 0x6f8b44b0.
//
// Solidity: function setMaxSupply(uint256 _newMaxSupply) returns()
func (_OwnerToken *OwnerTokenTransactorSession) SetMaxSupply(_newMaxSupply *big.Int) (*types.Transaction, error) {
	return _OwnerToken.Contract.SetMaxSupply(&_OwnerToken.TransactOpts, _newMaxSupply)
}

// SetSignerPublicKey is a paid mutator transaction binding the contract method 0x9404c91a.
//
// Solidity: function setSignerPublicKey(bytes _newSignerPublicKey) returns()
func (_OwnerToken *OwnerTokenTransactor) SetSignerPublicKey(opts *bind.TransactOpts, _newSignerPublicKey []byte) (*types.Transaction, error) {
	return _OwnerToken.contract.Transact(opts, "setSignerPublicKey", _newSignerPublicKey)
}

// SetSignerPublicKey is a paid mutator transaction binding the contract method 0x9404c91a.
//
// Solidity: function setSignerPublicKey(bytes _newSignerPublicKey) returns()
func (_OwnerToken *OwnerTokenSession) SetSignerPublicKey(_newSignerPublicKey []byte) (*types.Transaction, error) {
	return _OwnerToken.Contract.SetSignerPublicKey(&_OwnerToken.TransactOpts, _newSignerPublicKey)
}

// SetSignerPublicKey is a paid mutator transaction binding the contract method 0x9404c91a.
//
// Solidity: function setSignerPublicKey(bytes _newSignerPublicKey) returns()
func (_OwnerToken *OwnerTokenTransactorSession) SetSignerPublicKey(_newSignerPublicKey []byte) (*types.Transaction, error) {
	return _OwnerToken.Contract.SetSignerPublicKey(&_OwnerToken.TransactOpts, _newSignerPublicKey)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_OwnerToken *OwnerTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _OwnerToken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_OwnerToken *OwnerTokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _OwnerToken.Contract.TransferFrom(&_OwnerToken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_OwnerToken *OwnerTokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _OwnerToken.Contract.TransferFrom(&_OwnerToken.TransactOpts, from, to, tokenId)
}

// OwnerTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the OwnerToken contract.
type OwnerTokenApprovalIterator struct {
	Event *OwnerTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnerTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnerTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnerTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnerTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnerTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnerTokenApproval represents a Approval event raised by the OwnerToken contract.
type OwnerTokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_OwnerToken *OwnerTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*OwnerTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _OwnerToken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &OwnerTokenApprovalIterator{contract: _OwnerToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_OwnerToken *OwnerTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *OwnerTokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _OwnerToken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnerTokenApproval)
				if err := _OwnerToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_OwnerToken *OwnerTokenFilterer) ParseApproval(log types.Log) (*OwnerTokenApproval, error) {
	event := new(OwnerTokenApproval)
	if err := _OwnerToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OwnerTokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the OwnerToken contract.
type OwnerTokenApprovalForAllIterator struct {
	Event *OwnerTokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnerTokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnerTokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnerTokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnerTokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnerTokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnerTokenApprovalForAll represents a ApprovalForAll event raised by the OwnerToken contract.
type OwnerTokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_OwnerToken *OwnerTokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*OwnerTokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OwnerToken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &OwnerTokenApprovalForAllIterator{contract: _OwnerToken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_OwnerToken *OwnerTokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *OwnerTokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _OwnerToken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnerTokenApprovalForAll)
				if err := _OwnerToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_OwnerToken *OwnerTokenFilterer) ParseApprovalForAll(log types.Log) (*OwnerTokenApprovalForAll, error) {
	event := new(OwnerTokenApprovalForAll)
	if err := _OwnerToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OwnerTokenStatusMintIterator is returned from FilterStatusMint and is used to iterate over the raw logs and unpacked data for StatusMint events raised by the OwnerToken contract.
type OwnerTokenStatusMintIterator struct {
	Event *OwnerTokenStatusMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnerTokenStatusMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnerTokenStatusMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnerTokenStatusMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnerTokenStatusMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnerTokenStatusMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnerTokenStatusMint represents a StatusMint event raised by the OwnerToken contract.
type OwnerTokenStatusMint struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterStatusMint is a free log retrieval operation binding the contract event 0x28c427b0611d99da5c4f7368abe57e86b045b483c4689ae93e90745802335b87.
//
// Solidity: event StatusMint(address indexed from, address indexed to, uint256 indexed tokenId)
func (_OwnerToken *OwnerTokenFilterer) FilterStatusMint(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*OwnerTokenStatusMintIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _OwnerToken.contract.FilterLogs(opts, "StatusMint", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &OwnerTokenStatusMintIterator{contract: _OwnerToken.contract, event: "StatusMint", logs: logs, sub: sub}, nil
}

// WatchStatusMint is a free log subscription operation binding the contract event 0x28c427b0611d99da5c4f7368abe57e86b045b483c4689ae93e90745802335b87.
//
// Solidity: event StatusMint(address indexed from, address indexed to, uint256 indexed tokenId)
func (_OwnerToken *OwnerTokenFilterer) WatchStatusMint(opts *bind.WatchOpts, sink chan<- *OwnerTokenStatusMint, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _OwnerToken.contract.WatchLogs(opts, "StatusMint", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnerTokenStatusMint)
				if err := _OwnerToken.contract.UnpackLog(event, "StatusMint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStatusMint is a log parse operation binding the contract event 0x28c427b0611d99da5c4f7368abe57e86b045b483c4689ae93e90745802335b87.
//
// Solidity: event StatusMint(address indexed from, address indexed to, uint256 indexed tokenId)
func (_OwnerToken *OwnerTokenFilterer) ParseStatusMint(log types.Log) (*OwnerTokenStatusMint, error) {
	event := new(OwnerTokenStatusMint)
	if err := _OwnerToken.contract.UnpackLog(event, "StatusMint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OwnerTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the OwnerToken contract.
type OwnerTokenTransferIterator struct {
	Event *OwnerTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnerTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnerTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnerTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnerTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnerTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnerTokenTransfer represents a Transfer event raised by the OwnerToken contract.
type OwnerTokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_OwnerToken *OwnerTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*OwnerTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _OwnerToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &OwnerTokenTransferIterator{contract: _OwnerToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_OwnerToken *OwnerTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *OwnerTokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _OwnerToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnerTokenTransfer)
				if err := _OwnerToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_OwnerToken *OwnerTokenFilterer) ParseTransfer(log types.Log) (*OwnerTokenTransfer, error) {
	event := new(OwnerTokenTransfer)
	if err := _OwnerToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
