// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

// DeviceManagementExchangeAccessStateReason undocumented
type DeviceManagementExchangeAccessStateReason int

const (
	// DeviceManagementExchangeAccessStateReasonVNone undocumented
	DeviceManagementExchangeAccessStateReasonVNone DeviceManagementExchangeAccessStateReason = 0
	// DeviceManagementExchangeAccessStateReasonVUnknown undocumented
	DeviceManagementExchangeAccessStateReasonVUnknown DeviceManagementExchangeAccessStateReason = 1
	// DeviceManagementExchangeAccessStateReasonVExchangeGlobalRule undocumented
	DeviceManagementExchangeAccessStateReasonVExchangeGlobalRule DeviceManagementExchangeAccessStateReason = 2
	// DeviceManagementExchangeAccessStateReasonVExchangeIndividualRule undocumented
	DeviceManagementExchangeAccessStateReasonVExchangeIndividualRule DeviceManagementExchangeAccessStateReason = 3
	// DeviceManagementExchangeAccessStateReasonVExchangeDeviceRule undocumented
	DeviceManagementExchangeAccessStateReasonVExchangeDeviceRule DeviceManagementExchangeAccessStateReason = 4
	// DeviceManagementExchangeAccessStateReasonVExchangeUpgrade undocumented
	DeviceManagementExchangeAccessStateReasonVExchangeUpgrade DeviceManagementExchangeAccessStateReason = 5
	// DeviceManagementExchangeAccessStateReasonVExchangeMailboxPolicy undocumented
	DeviceManagementExchangeAccessStateReasonVExchangeMailboxPolicy DeviceManagementExchangeAccessStateReason = 6
	// DeviceManagementExchangeAccessStateReasonVOther undocumented
	DeviceManagementExchangeAccessStateReasonVOther DeviceManagementExchangeAccessStateReason = 7
	// DeviceManagementExchangeAccessStateReasonVCompliant undocumented
	DeviceManagementExchangeAccessStateReasonVCompliant DeviceManagementExchangeAccessStateReason = 8
	// DeviceManagementExchangeAccessStateReasonVNotCompliant undocumented
	DeviceManagementExchangeAccessStateReasonVNotCompliant DeviceManagementExchangeAccessStateReason = 9
	// DeviceManagementExchangeAccessStateReasonVNotEnrolled undocumented
	DeviceManagementExchangeAccessStateReasonVNotEnrolled DeviceManagementExchangeAccessStateReason = 10
	// DeviceManagementExchangeAccessStateReasonVUnknownLocation undocumented
	DeviceManagementExchangeAccessStateReasonVUnknownLocation DeviceManagementExchangeAccessStateReason = 12
	// DeviceManagementExchangeAccessStateReasonVMFARequired undocumented
	DeviceManagementExchangeAccessStateReasonVMFARequired DeviceManagementExchangeAccessStateReason = 13
	// DeviceManagementExchangeAccessStateReasonVAzureADBlockDueToAccessPolicy undocumented
	DeviceManagementExchangeAccessStateReasonVAzureADBlockDueToAccessPolicy DeviceManagementExchangeAccessStateReason = 14
	// DeviceManagementExchangeAccessStateReasonVCompromisedPassword undocumented
	DeviceManagementExchangeAccessStateReasonVCompromisedPassword DeviceManagementExchangeAccessStateReason = 15
	// DeviceManagementExchangeAccessStateReasonVDeviceNotKnownWithManagedApp undocumented
	DeviceManagementExchangeAccessStateReasonVDeviceNotKnownWithManagedApp DeviceManagementExchangeAccessStateReason = 16
)

// DeviceManagementExchangeAccessStateReasonPNone returns a pointer to DeviceManagementExchangeAccessStateReasonVNone
func DeviceManagementExchangeAccessStateReasonPNone() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVNone
	return &v
}

// DeviceManagementExchangeAccessStateReasonPUnknown returns a pointer to DeviceManagementExchangeAccessStateReasonVUnknown
func DeviceManagementExchangeAccessStateReasonPUnknown() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVUnknown
	return &v
}

// DeviceManagementExchangeAccessStateReasonPExchangeGlobalRule returns a pointer to DeviceManagementExchangeAccessStateReasonVExchangeGlobalRule
func DeviceManagementExchangeAccessStateReasonPExchangeGlobalRule() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVExchangeGlobalRule
	return &v
}

// DeviceManagementExchangeAccessStateReasonPExchangeIndividualRule returns a pointer to DeviceManagementExchangeAccessStateReasonVExchangeIndividualRule
func DeviceManagementExchangeAccessStateReasonPExchangeIndividualRule() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVExchangeIndividualRule
	return &v
}

// DeviceManagementExchangeAccessStateReasonPExchangeDeviceRule returns a pointer to DeviceManagementExchangeAccessStateReasonVExchangeDeviceRule
func DeviceManagementExchangeAccessStateReasonPExchangeDeviceRule() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVExchangeDeviceRule
	return &v
}

// DeviceManagementExchangeAccessStateReasonPExchangeUpgrade returns a pointer to DeviceManagementExchangeAccessStateReasonVExchangeUpgrade
func DeviceManagementExchangeAccessStateReasonPExchangeUpgrade() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVExchangeUpgrade
	return &v
}

// DeviceManagementExchangeAccessStateReasonPExchangeMailboxPolicy returns a pointer to DeviceManagementExchangeAccessStateReasonVExchangeMailboxPolicy
func DeviceManagementExchangeAccessStateReasonPExchangeMailboxPolicy() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVExchangeMailboxPolicy
	return &v
}

// DeviceManagementExchangeAccessStateReasonPOther returns a pointer to DeviceManagementExchangeAccessStateReasonVOther
func DeviceManagementExchangeAccessStateReasonPOther() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVOther
	return &v
}

// DeviceManagementExchangeAccessStateReasonPCompliant returns a pointer to DeviceManagementExchangeAccessStateReasonVCompliant
func DeviceManagementExchangeAccessStateReasonPCompliant() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVCompliant
	return &v
}

// DeviceManagementExchangeAccessStateReasonPNotCompliant returns a pointer to DeviceManagementExchangeAccessStateReasonVNotCompliant
func DeviceManagementExchangeAccessStateReasonPNotCompliant() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVNotCompliant
	return &v
}

// DeviceManagementExchangeAccessStateReasonPNotEnrolled returns a pointer to DeviceManagementExchangeAccessStateReasonVNotEnrolled
func DeviceManagementExchangeAccessStateReasonPNotEnrolled() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVNotEnrolled
	return &v
}

// DeviceManagementExchangeAccessStateReasonPUnknownLocation returns a pointer to DeviceManagementExchangeAccessStateReasonVUnknownLocation
func DeviceManagementExchangeAccessStateReasonPUnknownLocation() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVUnknownLocation
	return &v
}

// DeviceManagementExchangeAccessStateReasonPMFARequired returns a pointer to DeviceManagementExchangeAccessStateReasonVMFARequired
func DeviceManagementExchangeAccessStateReasonPMFARequired() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVMFARequired
	return &v
}

// DeviceManagementExchangeAccessStateReasonPAzureADBlockDueToAccessPolicy returns a pointer to DeviceManagementExchangeAccessStateReasonVAzureADBlockDueToAccessPolicy
func DeviceManagementExchangeAccessStateReasonPAzureADBlockDueToAccessPolicy() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVAzureADBlockDueToAccessPolicy
	return &v
}

// DeviceManagementExchangeAccessStateReasonPCompromisedPassword returns a pointer to DeviceManagementExchangeAccessStateReasonVCompromisedPassword
func DeviceManagementExchangeAccessStateReasonPCompromisedPassword() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVCompromisedPassword
	return &v
}

// DeviceManagementExchangeAccessStateReasonPDeviceNotKnownWithManagedApp returns a pointer to DeviceManagementExchangeAccessStateReasonVDeviceNotKnownWithManagedApp
func DeviceManagementExchangeAccessStateReasonPDeviceNotKnownWithManagedApp() *DeviceManagementExchangeAccessStateReason {
	v := DeviceManagementExchangeAccessStateReasonVDeviceNotKnownWithManagedApp
	return &v
}
