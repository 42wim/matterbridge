// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

// ConditionalAccessGrantControl undocumented
type ConditionalAccessGrantControl int

const (
	// ConditionalAccessGrantControlVBlock undocumented
	ConditionalAccessGrantControlVBlock ConditionalAccessGrantControl = 0
	// ConditionalAccessGrantControlVMFA undocumented
	ConditionalAccessGrantControlVMFA ConditionalAccessGrantControl = 1
	// ConditionalAccessGrantControlVCompliantDevice undocumented
	ConditionalAccessGrantControlVCompliantDevice ConditionalAccessGrantControl = 2
	// ConditionalAccessGrantControlVDomainJoinedDevice undocumented
	ConditionalAccessGrantControlVDomainJoinedDevice ConditionalAccessGrantControl = 3
	// ConditionalAccessGrantControlVApprovedApplication undocumented
	ConditionalAccessGrantControlVApprovedApplication ConditionalAccessGrantControl = 4
	// ConditionalAccessGrantControlVCompliantApplication undocumented
	ConditionalAccessGrantControlVCompliantApplication ConditionalAccessGrantControl = 5
)

// ConditionalAccessGrantControlPBlock returns a pointer to ConditionalAccessGrantControlVBlock
func ConditionalAccessGrantControlPBlock() *ConditionalAccessGrantControl {
	v := ConditionalAccessGrantControlVBlock
	return &v
}

// ConditionalAccessGrantControlPMFA returns a pointer to ConditionalAccessGrantControlVMFA
func ConditionalAccessGrantControlPMFA() *ConditionalAccessGrantControl {
	v := ConditionalAccessGrantControlVMFA
	return &v
}

// ConditionalAccessGrantControlPCompliantDevice returns a pointer to ConditionalAccessGrantControlVCompliantDevice
func ConditionalAccessGrantControlPCompliantDevice() *ConditionalAccessGrantControl {
	v := ConditionalAccessGrantControlVCompliantDevice
	return &v
}

// ConditionalAccessGrantControlPDomainJoinedDevice returns a pointer to ConditionalAccessGrantControlVDomainJoinedDevice
func ConditionalAccessGrantControlPDomainJoinedDevice() *ConditionalAccessGrantControl {
	v := ConditionalAccessGrantControlVDomainJoinedDevice
	return &v
}

// ConditionalAccessGrantControlPApprovedApplication returns a pointer to ConditionalAccessGrantControlVApprovedApplication
func ConditionalAccessGrantControlPApprovedApplication() *ConditionalAccessGrantControl {
	v := ConditionalAccessGrantControlVApprovedApplication
	return &v
}

// ConditionalAccessGrantControlPCompliantApplication returns a pointer to ConditionalAccessGrantControlVCompliantApplication
func ConditionalAccessGrantControlPCompliantApplication() *ConditionalAccessGrantControl {
	v := ConditionalAccessGrantControlVCompliantApplication
	return &v
}
