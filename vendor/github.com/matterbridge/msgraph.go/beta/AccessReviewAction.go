// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import "context"

// AccessReviewStopRequestParameter undocumented
type AccessReviewStopRequestParameter struct {
}

// AccessReviewSendReminderRequestParameter undocumented
type AccessReviewSendReminderRequestParameter struct {
}

// AccessReviewResetDecisionsRequestParameter undocumented
type AccessReviewResetDecisionsRequestParameter struct {
}

// AccessReviewApplyDecisionsRequestParameter undocumented
type AccessReviewApplyDecisionsRequestParameter struct {
}

//
type AccessReviewStopRequestBuilder struct{ BaseRequestBuilder }

// Stop action undocumented
func (b *AccessReviewRequestBuilder) Stop(reqObj *AccessReviewStopRequestParameter) *AccessReviewStopRequestBuilder {
	bb := &AccessReviewStopRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/stop"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type AccessReviewStopRequest struct{ BaseRequest }

//
func (b *AccessReviewStopRequestBuilder) Request() *AccessReviewStopRequest {
	return &AccessReviewStopRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *AccessReviewStopRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
type AccessReviewSendReminderRequestBuilder struct{ BaseRequestBuilder }

// SendReminder action undocumented
func (b *AccessReviewRequestBuilder) SendReminder(reqObj *AccessReviewSendReminderRequestParameter) *AccessReviewSendReminderRequestBuilder {
	bb := &AccessReviewSendReminderRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/sendReminder"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type AccessReviewSendReminderRequest struct{ BaseRequest }

//
func (b *AccessReviewSendReminderRequestBuilder) Request() *AccessReviewSendReminderRequest {
	return &AccessReviewSendReminderRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *AccessReviewSendReminderRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
type AccessReviewResetDecisionsRequestBuilder struct{ BaseRequestBuilder }

// ResetDecisions action undocumented
func (b *AccessReviewRequestBuilder) ResetDecisions(reqObj *AccessReviewResetDecisionsRequestParameter) *AccessReviewResetDecisionsRequestBuilder {
	bb := &AccessReviewResetDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/resetDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type AccessReviewResetDecisionsRequest struct{ BaseRequest }

//
func (b *AccessReviewResetDecisionsRequestBuilder) Request() *AccessReviewResetDecisionsRequest {
	return &AccessReviewResetDecisionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *AccessReviewResetDecisionsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
type AccessReviewApplyDecisionsRequestBuilder struct{ BaseRequestBuilder }

// ApplyDecisions action undocumented
func (b *AccessReviewRequestBuilder) ApplyDecisions(reqObj *AccessReviewApplyDecisionsRequestParameter) *AccessReviewApplyDecisionsRequestBuilder {
	bb := &AccessReviewApplyDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/applyDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type AccessReviewApplyDecisionsRequest struct{ BaseRequest }

//
func (b *AccessReviewApplyDecisionsRequestBuilder) Request() *AccessReviewApplyDecisionsRequest {
	return &AccessReviewApplyDecisionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *AccessReviewApplyDecisionsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
